

=======================================================

	std::vector<STRING> v{ std::istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라


	// [문제] v를 정렬하라. 람다에서 길이오름차순


	// [문제] v의 각 원소를 오름차순으로 정렬하라


=======================================================

	STRING word;
	std::cout << "단어를 입력하세요: ";
	std::cin >> word;
	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라


=======================================================

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라
	// copy 알고리즘을 사용할 것


=======================================================
05.05
=======================================================

	std::vector<int> v(100);

	std::iota(v.begin(), v.end(), 1);
	std::shuffle(v.begin(), v.end(), dre);

	// [문제] v의 원소를 set에 넣고 출력한다

	// [문제] v의 원소를 내림차순으로 정렬하는 set에 넣고 출력한다


=======================================================

	// [문제] "source.cpp"의 단어를 set에 저장하고 출력


=======================================================

	// 역순으로 한 단어 한 줄씩 화면 중앙에 출력하라
	for (const std::string& x : s) {
		std::cout << std::format({ "{:^80}" }, x) << std::endl;
	}
	std::cout << std::endl;

	//for (auto i = s.cbegin(); i != s.cend(); ++i) {
	//	std::cout << std::format({ "{:^80}" }, *i) << std::endl;
	//}


=======================================================

	// [문제] s에 Dog 1000개를 집어넣어라

	// [문제] s에 Dog 1000개를 집어넣어라 - 이름 오름차순


=======================================================
05.11
=======================================================

=======================================================
05.12
=======================================================

	// [문제] 알파벳과 빈도수를 화면에 출력하라
	// std::map<알파벳, 개수>

	std::ifstream in{ "Frankenstein.txt" };
	
	// [문제] 개수 내림차순으로 출력하라

	// [문제] 길이가 11인 단어를 "길이11.txt"에 기록하라


	// [문제] 이 소설에 사용된 단어와 개수를 출력하라.
	// 앞에서부터 20개만 출력하라.
	// 개수 오름차순으로 정렬하라
	
	
=======================================================
05.18
=======================================================

=======================================================
05.19
=======================================================

	std::vector<STRING> v{ "Standard", "Template", "Library" };

	// [문제] v에 있는 원소가 전부 5글자 이상인가?

=======================================================

	std::string str{ "Google’s Russian branch plans to file for bankruptcy" };
	// [문제] str을 전광판처럼 계속 흘러가게 출력하라

=======================================================

	std::vector<int> v{ 1,2,3,4,5,6,7,8,9,10 };
	// [문제] v에서 짝수를 제거하라.

=======================================================

	// [문제] lotto
	// sample 사용


=======================================================
05.25
=======================================================

	// [문제] Frankenstein.txt에 사용된 단어 가짓수는?
	std::ifstream in{ "Frankenstein.txt" };

=======================================================

	// 데이터 준비
	std::vector<int> v(100);			// int {}를 100번 호출
	std::iota(v.begin(), v.end(), 1);

	// [문제] 20등까지만 통과시켜라


=======================================================
05.26
=======================================================

=======================================================
06.02
=======================================================

=======================================================
06.08
=======================================================

	// [문제] "단어들.txt"에 몇 단어가 있나 출력하라.
	std::ifstream in{ "단어들.txt" };

	// [문제] 단어들.txt는 정렬되어 있나?
	std::cout << std::boolalpha << std::is_sorted(v.begin(), v.end()) << std::endl;

	// [문제] 중복된 단어가 있나?

	// [문제] 가장 긴 단어를 출력하라


	// 사전에 있나 확인?
	if (std::binary_search(v.begin(), v.end(), word))
	{
		// 애너그램을 찾아 출력한다
		// 입력한 단어를 정렬한다


