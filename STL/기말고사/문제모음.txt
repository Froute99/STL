STRING 클래스 iterator 만들기


	// [문제] 실행되게 하라
	std::vector<STRING> v{ std::istream_iterator<STRING>{in}, {} };


=======================================================

	std::vector<STRING> v{ std::istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라


	// [문제] v를 정렬하라. 람다에서 길이오름차순


	// [문제] v의 각 원소를 오름차순으로 정렬하라
	

=======================================================
	
	STRING word;
	std::cout << "단어를 입력하세요: ";
	std::cin >> word;
	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라


=======================================================

	// [문제] 키보드에서 입력한 글자를 벡터에 저장하라
	// copy 알고리즘을 사용할 것


=======================================================

05.05
	// [문제] print는 a를 인자로 받아 전체 원소를 출력한다
	// a를 선언 및 정의하고 호출하라


=======================================================

	std::vector<int> v(100);

	std::iota(v.begin(), v.end(), 1);
	std::shuffle(v.begin(), v.end(), dre);

	// [문제] v의 원소를 set에 넣고 출력한다

	// [문제] v의 원소를 내림차순으로 정렬하는 set에 넣고 출력한다


=======================================================

	// [문제] "source.cpp"의 단어를 set에 저장하고 출력


=======================================================

	// 역순으로 한 단어 한 줄씩 화면 중앙에 출력하라
	for (const std::string& x : s) {
		std::cout << std::format({ "{:^80}" }, x) << std::endl;
	}
	std::cout << std::endl;

	//for (auto i = s.cbegin(); i != s.cend(); ++i) {
	//	std::cout << std::format({ "{:^80}" }, *i) << std::endl;
	//}


=======================================================

	// [문제] s에 Dog 1000개를 집어넣어라

	// [문제] s에 Dog 1000개를 집어넣어라 - 이름 오름차순



