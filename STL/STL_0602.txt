

파일이름: source.cpp
파일크기: 893
2022-06-02 13:37:16 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <class Iter>
void f(Iter iter)
{
	if (std::is_same_v<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>)
	{
		std::cout << "랜덤입니다\n";
	}
}


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 921
2022-06-02 13:37:34 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <class Iter>
void f(Iter iter)
{
	if (std::is_same_v<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>)
	{
		std::cout << "랜덤입니다\n";
	}
}		// C++20부터는 이렇게 안씀


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 967
2022-06-02 13:38:04 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <class Iter>
void f(Iter iter)
{
	if (std::is_same_v<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>)
	{
		std::cout << "랜덤입니다\n";
	}
}		// C++20부터는 이렇게 안씀


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});
	f(std::forward_list<int>::const_pointer{});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1019
2022-06-02 13:38:26 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <class Iter>
void f(Iter iter)
{
	if (std::is_same_v<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>)
	{
		std::cout << "랜덤입니다\n";
	}
	else
	{
		std::cout << "랜덤은 아닙니다\n";
	}
}		// C++20부터는 이렇게 안씀


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});
	f(std::forward_list<int>::const_pointer{});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1020
2022-06-02 13:38:47 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <class Iter>
void f(Iter iter)
{
	if (std::is_same_v<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>)
	{
		std::cout << "랜덤입니다\n";
	}
	else
	{
		std::cout << "랜덤은 아닙니다\n";
	}
}		// C++20부터는 이렇게 안씀


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});
	f(std::forward_list<int>::const_iterator{});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1007
2022-06-02 13:48:30 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <std::input_or_output_iterator Iter>
void f(Iter iter)
{
	if (std::contiguous_iterator<Iter>)
		std::cout << "contiguous 반복자" << std::endl;
	if (std::random_access_iterator<Iter>)
		std::cout << "random-access 반복자" << std::endl;
}


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});
	f(std::forward_list<int>::const_iterator{});
	//f(3.4);

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1434
2022-06-02 13:52:14 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <std::input_or_output_iterator Iter>
void f(Iter iter)
{
	if (std::contiguous_iterator<Iter>)
		std::cout << "contiguous 반복자" << std::endl;
	if (std::random_access_iterator<Iter>)
		std::cout << "random-access 반복자" << std::endl;
	if (std::bidirectional_iterator<Iter>)
		std::cout << "bidirectional 반복자" << std::endl;
	if (std::forward_iterator<Iter>)
		std::cout << "forward 반복자" << std::endl;
	if (std::input_iterator<Iter>)
		std::cout << "input 반복자" << std::endl;
	//if (std::output_iterator<Iter>)
	//	std::cout << "output 반복자" << std::endl;

	std::cout << std::endl;
	std::cout << "--------------------------------------\n\n";
}


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.
	f(std::vector<char>::iterator{});
	f(std::forward_list<int>::const_iterator{});
	//f(3.4);

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1579
2022-06-02 13:54:58 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <vector>
#include <deque>
#include <list>
#include <forward_list>
#include <iterator>
#include <concepts>
#include <ranges>
#include "save.h"
#include "STRING.h"

extern bool isMessageToggle;

template <std::input_or_output_iterator Iter>
void f(Iter iter)
{
	if (std::contiguous_iterator<Iter>)
		std::cout << "contiguous 반복자" << std::endl;
	if (std::random_access_iterator<Iter>)
		std::cout << "random-access 반복자" << std::endl;
	if (std::bidirectional_iterator<Iter>)
		std::cout << "bidirectional 반복자" << std::endl;
	if (std::forward_iterator<Iter>)
		std::cout << "forward 반복자" << std::endl;
	if (std::input_iterator<Iter>)
		std::cout << "input 반복자" << std::endl;
	//if (std::output_iterator<Iter>)
	//	std::cout << "output 반복자" << std::endl;

	std::cout << std::endl;
	std::cout << "--------------------------------------\n\n";
}


int main() {

	// [문제] 함수 f는 반복자를 인자로 받는다
	// f는 반복자 category를 출력한다.

	//f(3.4);		// 제약조건 통과안됨

	f(std::vector<char>::iterator{});
	f(std::deque<double>::reverse_iterator{});
	f(std::list<int>{}.begin());
	f(std::forward_list<int>::const_iterator{});
	f(std::istream_iterator<int>{std::cin});

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 576
2022-06-02 14:14:27 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include "save.h"
#include "STRING.h"



int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	std::sort(std::begin(a), std::end(a));

	for (int n : a)
		std::cout << n << " ";
	std::cout << std::endl;

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 619
2022-06-02 14:16:55 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 * 
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	- 
 *		module		- ixx
 * 
 * 
 * type traits
 * 
 * 
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);
	
	std::sort(v.begin(), v.end());

	for (int n : a)
		std::cout << n << " ";
	std::cout << std::endl;

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 638
2022-06-02 14:20:48 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	//std::sort(v.begin(), v.end());
	std::ranges::sort(v);

	for (int n : a)
		std::cout << n << " ";
	std::cout << std::endl;

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 987
2022-06-02 14:27:14 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include <random>
#include "save.h"
#include "STRING.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 1,100 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };


class Dog {
	std::string name;
	int num;

public:
	Dog() {
		for (int i = 0; i < 5; ++i)
		{
			name += uidName(dre);
		}
		num = uidNum(dre);
	}

	std::string getName() const { return name; }
	int getNum() const { return num; }
};


int main()
{
	std::vector<Dog> v(100);


	for (const Dog& dog : v)
	{
		std::cout << dog.getName() << " - " << dog.getNum() << std::endl;
	}


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1070
2022-06-02 14:35:11 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include <random>
#include "save.h"
#include "STRING.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 1,100 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };


class Dog {
	std::string name;
	int num;

public:
	Dog() {
		for (int i = 0; i < 5; ++i)
		{
			name += uidName(dre);
		}
		num = uidNum(dre);
	}

	std::string getName() const { return name; }
	int getNum() const { return num; }
};


int main()
{
	std::vector<Dog> v(100);

	// [문제] 이름 기준 오름차순 정렬

	std::ranges::sort(v, {}, &Dog::getName);


	for (const Dog& dog : v)
	{
		std::cout << dog.getName() << " - " << dog.getNum() << std::endl;
	}


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1069
2022-06-02 14:35:38 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include <random>
#include "save.h"
#include "STRING.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 1,100 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };


class Dog {
	std::string name;
	int num;

public:
	Dog() {
		for (int i = 0; i < 5; ++i)
		{
			name += uidName(dre);
		}
		num = uidNum(dre);
	}

	std::string getName() const { return name; }
	int getNum() const { return num; }
};


int main()
{
	std::vector<Dog> v(100);

	// [문제] 숫자 기준 오름차순 정렬

	std::ranges::sort(v, {}, &Dog::getNum);


	for (const Dog& dog : v)
	{
		std::cout << dog.getName() << " - " << dog.getNum() << std::endl;
	}


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1087
2022-06-02 14:38:23 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include <random>
#include "save.h"
#include "STRING.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 1,100 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };


class Dog {
	std::string name;
	int num;

public:
	Dog() {
		for (int i = 0; i < 5; ++i)
		{
			name += uidName(dre);
		}
		num = uidNum(dre);
	}

	std::string getName() const { return name; }
	int getNum() const { return num; }
};


int main()
{
	std::vector<Dog> v(100);

	// [문제] 숫자 기준 내림차순 정렬

	std::ranges::sort(v, std::greater<int>{}, & Dog::getNum);


	for (const Dog& dog : v)
	{
		std::cout << dog.getName() << " - " << dog.getNum() << std::endl;
	}


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 1142
2022-06-02 14:39:26 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <algorithm>
#include <ranges>
#include <random>
#include "save.h"
#include "STRING.h"


std::default_random_engine dre;
std::uniform_int_distribution uidNum{ 1,100 };
std::uniform_int_distribution<int> uidName{ 'a', 'z' };


class Dog {
	std::string name;
	int num;

public:
	Dog() {
		for (int i = 0; i < 5; ++i)
		{
			name += uidName(dre);
		}
		num = uidNum(dre);
	}

	std::string getName() const { return name; }
	int getNum() const { return num; }
};


int main()
{
	std::vector<Dog> v(100);

	// [문제] 숫자 기준 내림차순 정렬하고 앞에서 부터 10개만 출력하라

	std::ranges::sort(v, std::greater<int>{}, & Dog::getNum);


	for (const Dog& dog : v | std::views::take(10))
	{
		std::cout << dog.getName() << " - " << dog.getNum() << std::endl;
	}


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 572
2022-06-02 15:00:10 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	std::cout << sizeof(v) << std::endl;
	std::cout << typeid(v).name() << std::endl;


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 753
2022-06-02 15:03:56 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	std::cout << sizeof(v) << std::endl;
	std::cout << typeid(v).name() << std::endl;

	// [문제] v에서 홀수만 골라 제곱하라.
	auto 홀수 = [](int n) {return n % 2; };
	for (int n : v | std::views::filter(홀수))
		std::cout << n << " ";
	std::cout << std::endl;


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 835
2022-06-02 15:06:28 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	std::cout << sizeof(v) << std::endl;
	std::cout << typeid(v).name() << std::endl;

	// [문제] v에서 홀수만 골라 제곱하라.
	auto 홀수 = [](int n) { return n % 2; };
	auto 제곱 = [](int n) { return n * n; };
	for (int n : v | std::views::filter(홀수)
				   | std::views::transform(제곱))
		std::cout << n << " ";
	std::cout << std::endl;


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 908
2022-06-02 15:07:28 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	std::cout << sizeof(v) << std::endl;
	std::cout << typeid(v).name() << std::endl;

	// [문제] v에서 홀수만 골라 제곱하라.
	auto 홀수 = [](int n) { return n % 2; };
	auto 제곱 = [](int n) { return n * n; };
	for (int n : v | std::views::filter(홀수)
				   | std::views::transform(제곱))
		std::cout << n << " ";
	std::cout << std::endl;
	
	for (int n : a)
		std::cout << n << " ";
	std::cout << std::endl;


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 843
2022-06-02 15:08:50 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include "save.h"
#include "STRING.h"


int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	auto v = std::views::all(a);

	*v.begin() = 333;

	// [문제] v에서 홀수만 골라 제곱하라.
	auto 홀수 = [](int n) { return n % 2; };
	auto 제곱 = [](int n) { return n * n; };
	for (int n : v | std::views::filter(홀수)
				   | std::views::transform(제곱))
		std::cout << n << " ";
	std::cout << std::endl;
	
	for (int n : a)
		std::cout << n << " ";
	std::cout << std::endl;


	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 726
2022-06-02 15:17:06 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include <format>
#include "save.h"
#include "STRING.h"


int main()
{
	// [문제] 10000부터 시작하는 무한개의 자연수를 생성하고 홀수 2000개만 출력하라
	auto odd = [](int n) { return n % 2; };
	for (int n : std::views::iota(10000) | std::views::filter(odd)
										 | std::views::take(2000))
		std::cout << std::format("{:8}", n);
	std::cout << std::endl;

	save("source.cpp", "STL_0602.txt");
}

=======================================================


파일이름: source.cpp
파일크기: 769
2022-06-02 15:19:02 GMT+9

/*
 * 2022. 06. 02
 * STL Class
 * JH Kim
 *
 *
 * C++20의 핵심
 * concepts
 * range/view
 *		coroutine	-
 *		module		- ixx
 *
 *
 * type traits
 *
 *
 *		6.15 기말고사
 *		6.16 강의 끝 - 한 학기 강의를 정리 책 소개
 *		6.20 점수 공개 사무실 앞
 */

#include <iostream>
#include <ranges>
#include <format>
#include "save.h"
#include "STRING.h"


int main()
{
	// [문제] 10000부터 시작하는 무한개의 자연수를 생성하고 홀수 2000개만 역순으로 출력하라
	auto odd = [](int n) { return n % 2; };
	for (int n : std::views::iota(10000) | std::views::filter(odd)
										 | std::views::take(2000)
										 | std::views::reverse)
		std::cout << std::format("{:8}", n);
	std::cout << std::endl;

	save("source.cpp", "STL_0602.txt");
}

=======================================================
