

파일이름: 소스.cpp
파일크기: 1500
2022-03-02 18:47:26 GMT+9



파일이름: 소스.cpp
파일크기: 1500
2022-03-02 18:48:28 GMT+9



파일이름: 소스.cpp
파일크기: 1604
2022-03-02 18:52:52 GMT+9



파일이름: 소스.cpp
파일크기: 1607
2022-03-02 18:54:40 GMT+9



파일이름: 소스.cpp
파일크기: 1741
2022-03-02 18:57:44 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.2 수910          수910목56                  (1주 1일)
//
// - 강의소개
// - 교과서 - 사이트 : cppreference.com
// - 코딩스타일 : google coding convention
// - 프로젝트 환경 : Release/x64
//		메뉴 - 프로젝트 - 설정 - C++언어(초안기능)
// 
// - save 파일 만들기
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;		// 이걸 안써야 하겠다

void save( string_view );

int main( ) 
{
	// string과 string_view의 크기를 출력하라
	cout << "string의 크기 - " << sizeof( string ) << endl;
	cout << "string_view의 크기 - " << sizeof( string_view ) << endl;

	save( "소스.cpp" );
}

void save( string_view fname )
{
	// 읽을 파일을 연다
	ifstream in { fname.data()};

	// 쓸 파일도 연다
	ofstream out{ "2022년 1학기 STL 수910목56 강의저장.txt", ios::app };



	out << endl << endl;

	// 저장할 파일의 이름을 파일에 출력한다
	out << "파일이름: " << fname << endl;

	// 저장할 파일의 크기를 출력한다(C++17)
	out << "파일크기: " << filesystem::file_size( fname ) << endl;

	// 현재 날짜와 시간을 출력한다(C++20)
	auto time = floor<chrono::seconds>(chrono::system_clock::now( ));
	out << chrono::zoned_time( "Asia/Seoul", time ) << endl;
	out << endl;


	// 읽을 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다
	// 1. 파일의 내용을 벡터로 읽어온다
	vector<char> v{ istreambuf_iterator<char>{in}, {} };

	// 2. 벡터에 있는 내용을 파일에 복사한다.
	copy( v.begin( ), v.end( ), ostream_iterator<char>{ out } );
}

파일이름: 소스.cpp
파일크기: 1796
2022-03-03 13:37:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// - 강의소개
// - 교과서 - 사이트 : cppreference.com
// - 코딩스타일 : google coding convention
// - 프로젝트 환경 : Release/x64
//		메뉴 - 프로젝트 - 설정 - C++언어(초안기능)
// 
// - save 파일 만들기
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include <filesystem>
#include <chrono>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;		// 이걸 안써야 하겠다

void save( string_view );

int main( ) 
{
	// string과 string_view의 크기를 출력하라
	cout << "string의 크기 - " << sizeof( string ) << endl;
	cout << "string_view의 크기 - " << sizeof( string_view ) << endl;

	save( "소스.cpp" );
}

void save( string_view fname )
{
	// 읽을 파일을 연다
	ifstream in { fname.data()};

	// 쓸 파일도 연다
	ofstream out{ "2022년 1학기 STL 수910목56 강의저장.txt", ios::app };



	out << endl << endl;

	// 저장할 파일의 이름을 파일에 출력한다
	out << "파일이름: " << fname << endl;

	// 저장할 파일의 크기를 출력한다(C++17)
	out << "파일크기: " << filesystem::file_size( fname ) << endl;

	// 현재 날짜와 시간을 출력한다(C++20)
	auto time = floor<chrono::seconds>(chrono::system_clock::now( ));
	out << chrono::zoned_time( "Asia/Seoul", time ) << endl;
	out << endl;


	// 읽을 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다

	// 1. 컨테이너(자료구조) 파일의 내용을 벡터로 읽어온다
	vector<char> v{ istreambuf_iterator<char>{in}, {} };

	// 2. 알고리즘을 사용하여 벡터에 있는 내용을 파일에 복사(copy 알고리즘)한다.
	copy( v.begin( ), v.end( ), ostream_iterator<char>{ out } );
}

파일이름: 소스.cpp
파일크기: 422
2022-03-03 14:00:20 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// save 함수를 save.h와 save.cpp로 옮겨라.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );
}




파일이름: save.h
파일크기: 70
2022-03-03 14:01:24 GMT+9

#pragma once
#include <string_view>

void save( std::string_view );

파일이름: save.cpp
파일크기: 1482
2022-03-03 14:01:24 GMT+9

//-----------------------------------------------------------------------------
// SAVE.CPP
// 
// 함수 save에 파일이름을 알려주면 강의를 저장하는
// "2022년 1학기 STL 수910목56 강의저장.txt"에 덧붙여 기록한다
//
// 2022. 3. 3                                        programmed by wulong
//-----------------------------------------------------------------------------
#include <fstream>
#include <filesystem>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

void save( std::string_view fname )
{
	// 읽을 파일을 연다
	std::ifstream in{ fname.data( ) };

	// 쓸 파일도 연다
	std::ofstream out{ "2022년 1학기 STL 수910목56 강의저장.txt", std::ios::app };

	out << std::endl << std::endl;

	// 저장할 파일의 이름을 파일에 출력한다
	out << "파일이름: " << fname << std::endl;

	// 저장할 파일의 크기를 출력한다(C++17)
	out << "파일크기: " << std::filesystem::file_size( fname ) << std::endl;

	// 현재 날짜와 시간을 출력한다(C++20)
	auto time = floor<std::chrono::seconds>( std::chrono::system_clock::now( ) );
	out << std::chrono::zoned_time( "Asia/Seoul", time ) << std::endl;
	out << std::endl;

	// 읽을 파일의 정보를 읽어 쓸 파일에 덧붙여 쓴다

	// 1. 컨테이너(자료구조) 파일의 내용을 벡터로 읽어온다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 2. 알고리즘을 사용하여 벡터에 있는 내용을 파일에 복사(copy 알고리즘)한다.
	copy( v.begin( ), v.end( ), std::ostream_iterator<char>{ out } );
}

파일이름: 소스.cpp
파일크기: 464
2022-03-03 14:01:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// save 함수를 save.h와 save.cpp로 옮겨라.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "save.h" );
	save( "save.cpp" );
	save( "소스.cpp" );
}




파일이름: 소스.cpp
파일크기: 536
2022-03-03 14:10:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;


// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1

//---------
int main( )
//---------
{
	int a{ 1 };
	int b{ 2 };

	swap( a, b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}




파일이름: 소스.cpp
파일크기: 650
2022-03-03 14:18:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1

void change( int&, int& );

//---------
int main( )
//---------
{
	int a{ 1 };
	int b{ 2 };

	change( a, b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

파일이름: 소스.cpp
파일크기: 656
2022-03-03 14:19:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1

void change( int*, int* );

//---------
int main( )
//---------
{
	int a{ 1 };
	int b{ 2 };

	change( &a, &b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}

void change( int* a, int* b )
{
	int temp{ *a };
	*a = *b;
	*b = temp;
}

파일이름: 소스.cpp
파일크기: 650
2022-03-03 14:20:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1

void change( int&, int& );

//---------
int main( )
//---------
{
	int a{ 1 };
	int b{ 2 };

	change( a, b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

파일이름: 소스.cpp
파일크기: 684
2022-03-03 14:45:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1
// 답지에 써라

void change( int&, int& );
using Dog = int;

//---------
int main( )
//---------
{
	Dog a{ 1 };
	Dog b{ 2 };

	change( a, b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

파일이름: 소스.cpp
파일크기: 1048
2022-03-03 15:11:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1
// 답지에 써라


class Dog {
	int num;

public:
	Dog( int i ) : num { i } {
	}

	friend ostream& operator<<( ostream&, const Dog& );
};

ostream& operator<<( ostream& os, const Dog& dog )
{
	os << dog.num;
	return os;
};



void change( int&, int& );
void change( Dog&, Dog& );


//---------
int main( )
//---------
{
	Dog a{ 1 };
	Dog b{ 2 };

	change( a, b );

	cout << a << ", " << b << endl;
	// operator<<(cout, a);


	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

void change( Dog& a, Dog& b )
{
	Dog temp{ a };
	a = b;			// a.operator(b);
	b = temp;
}

파일이름: 소스.cpp
파일크기: 936
2022-03-03 15:15:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.3 목56          수910목56                  (1주 2일)
//
// &의 의미
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1
// 답지에 써라


class Dog {
	int num;

public:
	Dog( int i ) : num { i } {
	}

	operator int( ) {
		return num;
	}
};



void change( int&, int& );
void change( Dog&, Dog& );


//---------
int main( )
//---------
{
	Dog a{ 1 };
	Dog b{ 2 };

	change( a, b );

	cout << (int)(Dog)a << ", " << (int)(Dog)b << endl;


	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

void change( Dog& a, Dog& b )
{
	Dog temp{ a };
	a = b;			// a.operator(b);
	b = temp;
}

파일이름: 소스.cpp
파일크기: 994
2022-03-10 13:37:10 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] main() 수정하면 안된다.
// a와 b의 값을 교환하라.    2, 1
// 답지에 써라


class Dog {
	int num;

public:
	Dog( int i ) : num { i } {
	}

	friend ostream& operator<<( ostream& os, const Dog& d ) {
		return os << d.num;
	}
};


void change( int&, int& );
void change( Dog&, Dog& );


//---------
int main( )
//---------
{
	Dog a{ 1 };
	Dog b{ 2 };

	change( a, b );

	cout << a << ", " << b << endl;

	save( "소스.cpp" );
}

void change( int& a, int& b )
{
	int temp{ a };
	a = b;
	b = temp;
}

void change( Dog& a, Dog& b )
{
	Dog temp{ a };
	a = b;			// a.operator(b);
	b = temp;
}

파일이름: 소스.cpp
파일크기: 808
2022-03-10 13:51:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------
#include <iostream>

#include <algorithm>

#include "save.h"
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 802
2022-03-10 13:51:43 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------
#include <iostream>

#include <algorithm>

#include "save.h"
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 808
2022-03-10 13:52:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------
#include <iostream>

#include <algorithm>

#include "save.h"
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 3641
2022-03-10 13:58:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

// iostream standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _IOSTREAM_
#define _IOSTREAM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <istream>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new
_STD_BEGIN
#ifdef _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern istream cin;
__PURE_APPDOMAIN_GLOBAL extern ostream cout;
__PURE_APPDOMAIN_GLOBAL extern ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream clog;
__PURE_APPDOMAIN_GLOBAL extern istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wclog;
#else // _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream clog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wclog;

class _CRTIMP2_PURE_IMPORT _Winit {
public:
	__thiscall _Winit( );
	__thiscall ~_Winit( ) noexcept;

private:
	__PURE_APPDOMAIN_GLOBAL static int _Init_cnt;
};
#endif // _M_CEE_PURE
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _IOSTREAM_
#pragma once
#include <string_view>

void save( std::string_view ); 
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

void change( int, int )
{
	cout << "이 함수가 무조건 1번 함수" << endl;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 3721
2022-03-10 13:59:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

// iostream standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _IOSTREAM_
#define _IOSTREAM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <istream>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new
_STD_BEGIN
#ifdef _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern istream cin;
__PURE_APPDOMAIN_GLOBAL extern ostream cout;
__PURE_APPDOMAIN_GLOBAL extern ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream clog;
__PURE_APPDOMAIN_GLOBAL extern istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wclog;
#else // _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream clog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wclog;

class _CRTIMP2_PURE_IMPORT _Winit {
public:
	__thiscall _Winit( );
	__thiscall ~_Winit( ) noexcept;

private:
	__PURE_APPDOMAIN_GLOBAL static int _Init_cnt;
};
#endif // _M_CEE_PURE
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _IOSTREAM_
#pragma once
#include <string_view>

void save( std::string_view ); 
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

void change( int, int )
{
	cout << "이 함수가 무조건 1번 함수" << endl;
}
void change( int&, int& )
{
	cout << "이 함수가 무조건 1번 함수" << endl;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 3707
2022-03-10 14:01:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

// iostream standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _IOSTREAM_
#define _IOSTREAM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <istream>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new
_STD_BEGIN
#ifdef _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern istream cin;
__PURE_APPDOMAIN_GLOBAL extern ostream cout;
__PURE_APPDOMAIN_GLOBAL extern ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream clog;
__PURE_APPDOMAIN_GLOBAL extern istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wclog;
#else // _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream clog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wclog;

class _CRTIMP2_PURE_IMPORT _Winit {
public:
	__thiscall _Winit( );
	__thiscall ~_Winit( ) noexcept;

private:
	__PURE_APPDOMAIN_GLOBAL static int _Init_cnt;
};
#endif // _M_CEE_PURE
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _IOSTREAM_
#pragma once
#include <string_view>

void save( std::string_view ); 
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

template <>
void change( int& a, int& b )
{
	cout << "컴파일러 이와 유사한 함수를 생성" << endl;
	int temp{ a };
	a = b;
	b = temp;
}


//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 3863
2022-03-10 14:02:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

// iostream standard header

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#pragma once
#ifndef _IOSTREAM_
#define _IOSTREAM_
#include <yvals_core.h>
#if _STL_COMPILER_PREPROCESSOR
#include <istream>

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new
_STD_BEGIN
#ifdef _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern istream cin;
__PURE_APPDOMAIN_GLOBAL extern ostream cout;
__PURE_APPDOMAIN_GLOBAL extern ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream clog;
__PURE_APPDOMAIN_GLOBAL extern istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern wostream* _Ptr_wclog;
#else // _M_CEE_PURE
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream clog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT istream* _Ptr_cin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_cerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT ostream* _Ptr_clog;

__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream wclog;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wistream* _Ptr_wcin;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcout;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wcerr;
__PURE_APPDOMAIN_GLOBAL extern _CRTDATA2_IMPORT wostream* _Ptr_wclog;

class _CRTIMP2_PURE_IMPORT _Winit {
public:
	__thiscall _Winit( );
	__thiscall ~_Winit( ) noexcept;

private:
	__PURE_APPDOMAIN_GLOBAL static int _Init_cnt;
};
#endif // _M_CEE_PURE
_STD_END
#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)
#endif // _STL_COMPILER_PREPROCESSOR
#endif // _IOSTREAM_
#pragma once
#include <string_view>

void save( std::string_view ); 
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

template <>
void change( int& a, int& b )
{
	cout << "컴파일러 이와 유사한 함수를 생성" << endl;
	int temp{ a };
	a = b;
	b = temp;
}

template <>
void change( string& a, string& b )
{
	cout << "컴파일러 string일 경우 이 함수를 생성" << endl;
	string temp{ a };
	a = b;
	b = temp;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 784
2022-03-10 14:05:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// template
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 템플릿 함수 change를 선언하고 정의하라.

template <class T>
void change( T& a, T& b )
{
	T temp{ a };
	a = b;
	b = temp;
}

//---------
int main( )
//---------
{
	{
		int a{ 1 }, b{ 2 };
		change( a, b );
		cout << a << ", " << b << endl;
	}
	{
		using namespace std::literals;
		string a{ "1"s }, b{ "2"s };
		change( a, b );
		cout << a << ", " << b << endl;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 522
2022-03-10 14:41:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	cout << rand();
	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 522
2022-03-10 14:42:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	cout << rand();
	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 522
2022-03-10 14:42:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	cout << rand();
	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 545
2022-03-10 14:43:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	srand( time(NULL) );
	cout << rand();
	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 545
2022-03-10 14:43:43 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	srand( time(NULL) );
	cout << rand();
	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 593
2022-03-10 14:44:18 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] 임의의 값을 갖는(랜덤값을 갖는) int 1000개를 화면에 출력하라

//---------
int main( )
//---------
{
	srand( time(NULL) );

	for ( int i = 0; i < 1000; ++i )
		cout << rand() << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 545
2022-03-10 14:52:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최댓값을 출력하라

//---------
int main( )
//---------
{
	int num = 0B1111111'11111111'11111111'11111111;

	cout << "int 최댓값 - " << num << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 519
2022-03-10 14:53:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최댓값을 출력하라

//---------
int main( )
//---------
{
	int num = 0x7FFFFFFF;

	cout << "int 최댓값 - " << num << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 519
2022-03-10 14:53:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최댓값을 출력하라

//---------
int main( )
//---------
{
	int num = 0xFFFFFFFF;

	cout << "int 최댓값 - " << num << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 528
2022-03-10 14:54:07 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최댓값을 출력하라

//---------
int main( )
//---------
{
	unsigned int num = 0xFFFFFFFF;

	cout << "int 최댓값 - " << num << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 516
2022-03-10 14:54:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// [문제] int의 최댓값을 출력하라

//---------
int main( )
//---------
{
	int num = INT_MAX;

	cout << "int 최댓값 - " << num << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 622
2022-03-10 15:04:57 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

default_random_engine dre;

//---------
int main( )
//---------
{
	cout << "엔진 크기 - " << sizeof( dre ) << endl;
	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 656
2022-03-10 15:08:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	cout << "분포 크기 - " << sizeof( uid ) << endl;
	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 647
2022-03-10 15:09:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	cout <<	uid( dre );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 647
2022-03-10 15:09:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	cout <<	uid( dre );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 675
2022-03-10 15:11:10 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

random_device rd;
default_random_engine dre { rd() };

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	cout <<	uid( dre );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 711
2022-03-10 15:12:08 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

random_device rd;
default_random_engine dre { rd() };

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 719
2022-03-10 15:13:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 int개를 화면에 출력하라

random_device rd;
default_random_engine dre { rd() };

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 874
2022-03-10 15:17:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

random_device rd;
default_random_engine dre { rd() };

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };
	cout << "파일 스트림 객체의 크기 - " << sizeof( out ) << endl;

//	for ( int i = 0; i < 1000; ++i )
//		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 803
2022-03-10 15:19:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.10 목56          수910목56                  (2주 1일)
//
// 랜덤엔진과 분포를 사용하여 랜덤값을 생성한다.
// 대량의 자료를 생성 저장 조작
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

random_device rd;
default_random_engine dre { rd() };

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for ( int i = 0; i < 1000; ++i )
		out <<	uid( dre ) << '\t';

	out << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 733
2022-03-16 17:35:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 733
2022-03-16 17:37:11 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 735
2022-03-16 17:38:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		printf( "%20d\n", uid( dre ) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 749
2022-03-16 17:39:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		; // format( );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 762
2022-03-16 17:41:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		format( "{:80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 770
2022-03-16 17:42:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 771
2022-03-16 17:42:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:<80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 771
2022-03-16 17:43:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:^80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 770
2022-03-16 17:44:07 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:20}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 817
2022-03-16 17:45:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		cout << format( "{:19}", uid( dre ) );
		if ((i % 4) == 0)
			cout << endl;
	}

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 812
2022-03-16 17:45:37 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		out << format( "{:19}", uid( dre ) );
		if ((i % 4) == 0)
			out << endl;
	}
	out << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 816
2022-03-16 17:46:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		out << format( "{:19}", uid( dre ) );
		if (((i+3) % 4) == 0)
			out << endl;
	}
	out << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 647
2022-03-16 17:52:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	if (!in) {
		cout << "파일 열기 실패" << endl;
		return 0;
	}



	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 657
2022-03-16 17:54:38 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (!in.eof( )) {
		in >> num;
		cout << num << "\t";
	}
	

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 637
2022-03-16 17:55:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (	in >> num )
		cout << num << "\t";


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 665
2022-03-16 17:56:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		cout << num << "\t";
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 776
2022-03-16 18:07:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 869
2022-03-16 18:08:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 869
2022-03-16 18:10:44 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 794
2022-03-16 18:16:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	cout << "최대값 -" << *max_element( istream_iterator<int>{in}, {} ) << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 887
2022-03-16 18:33:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] int 1000개를 저장하는데 필요한 메모리는 몇 바이트입니까?
//  - 만든 사람 마음대로
// 그렇지만 자료를 입출력하는데 가장 빠른 방법은 저수준 I/O를 사용하는 것이다.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt" };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 848
2022-03-16 18:51:45 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 출력파일의 write 함수로 메모리 전체를 기록하였다.
// 파일 크기가 맞나 확인하고 그렇지 않다면 이유를 설명하라.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt", ios::binary };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 848
2022-03-16 18:52:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 출력파일의 write 함수로 메모리 전체를 기록하였다.
// 파일 크기가 맞나 확인하고 그렇지 않다면 이유를 설명하라.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt", ios::binary };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 922
2022-03-16 19:04:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in.read( (char*)&num, sizeof( int ) );
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 863
2022-03-16 19:13:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num[1000];
	in.read( (char*)num, sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 863
2022-03-16 19:13:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num[1000];
	in.read( (char*)num, sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 934
2022-03-16 19:18:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.

	array<int, 1'000> num;		// int num[1'000]; 사용하지 말자

	in.read( (char*)num.data(), sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 727
저장시간: 2022-03-17 13:32:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 오늘 - ?
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 740
저장시간: 2022-03-17 13:32:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 오늘 - ?
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	cout << num;
	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 899
저장시간: 2022-03-17 13:41:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	new int [num];

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1102
저장시간: 2022-03-17 13:47:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += num;

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1102
저장시간: 2022-03-17 13:48:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += num;

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:49:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1116
저장시간: 2022-03-17 14:02:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1117
저장시간: 2022-03-17 14:03:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1151
저장시간: 2022-03-17 14:04:00 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1161
저장시간: 2022-03-17 14:04:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1161
저장시간: 2022-03-17 14:06:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1249
저장시간: 2022-03-17 14:12:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		try {
			p = new int[num];
		}
		catch (exception& e) {
			cout << e.what( ) << endl;
		}

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1246
저장시간: 2022-03-17 14:15:56 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1240
저장시간: 2022-03-17 14:16:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1240
저장시간: 2022-03-17 14:16:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1090
저장시간: 2022-03-17 14:40:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while (true) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p{};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
		cout << endl;

		// 여기서 메모리 반환
		delete[] p;
	}
}



파일이름: 소스.cpp
파일크기: 1131
저장시간: 2022-03-17 14:41:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		while (true) {
			int num;
			cout << "int 몇 개를 저장할까요? ";
			cin >> num;

			// 여기에 들어갈 코드를 답지에 적어라
			int* p{};
			p = new int[num];

			for (int i{}; i < num; ++i)
				p[i] = i + 1;

			// 합계를 구해 출력
			int sum{};
			for (int i{}; i < num; ++i)
				sum += p[i];

			cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
			cout << endl;

			// 여기서 메모리 반환
			delete[] p;
		}
	}
}



파일이름: 소스.cpp
파일크기: 1142
저장시간: 2022-03-17 14:42:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		while (true) {
			int num = 20'0000'0000;
			cout << "int 몇 개를 저장할까요? 20'0000'0000";

			// 여기에 들어갈 코드를 답지에 적어라
			int* p{};
			p = new int[num];

			for (int i{}; i < num; ++i)
				p[i] = i + 1;

			// 합계를 구해 출력
			int sum{};
			for (int i{}; i < num; ++i)
				sum += p[i];

			cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
			cout << endl;

			// 여기서 메모리 반환
			delete[] p;
		}
	}
}



파일이름: 소스.cpp
파일크기: 901
저장시간: 2022-03-17 14:46:20 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	new Dog[3];


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 934
저장시간: 2022-03-17 14:47:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	// 사용

	save( "소스.cpp" );

	delete p;
}



파일이름: 소스.cpp
파일크기: 936
저장시간: 2022-03-17 14:49:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	// 사용

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1043
저장시간: 2022-03-17 14:56:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
	}

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1058
저장시간: 2022-03-17 14:57:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
		delete[] p;
	}

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1077
저장시간: 2022-03-17 15:01:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	// RAII로 자동화
	unique_ptr<Dog[]> p{new Dog[3]};

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 640
저장시간: 2022-03-23 17:47:57 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	char ch;

	while (in >> ch )
		cout << ch;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 658
저장시간: 2022-03-23 17:48:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	char ch;

	in >> noskipws;
	while (in >> ch )
		cout << ch;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 708
저장시간: 2022-03-23 17:52:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	char ch;

	in >> noskipws;
	while (in >> ch) {
		if (islower(ch) )
			ch = toupper( ch );
		cout << ch;
	}


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 686
저장시간: 2022-03-23 17:53:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	char ch;

	in >> noskipws;
	while (in >> ch) {
		ch = toupper( ch );
		cout << ch;
	}


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 720
저장시간: 2022-03-23 17:54:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII
	ofstream out{ "소스 대문자.cpp" };

	char ch;

	in >> noskipws;
	while (in >> ch) {
		ch = toupper( ch );
		out << ch;
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 783
저장시간: 2022-03-23 18:08:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII
	ofstream out{ "소스 대문자.cpp" };

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{cout},
		[]( char c ) {
			return toupper( c );
		});
	

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 782
저장시간: 2022-03-23 18:09:10 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 소문자를 대문자로 바꿔
// "소스 대문자.cpp"로 저장하라

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII
	ofstream out{ "소스 대문자.cpp" };

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out},
		[]( char c ) {
			return toupper( c );
		});
	

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 784
저장시간: 2022-03-23 18:15:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 숫자를 *로 바꿔
// 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII
	ofstream out{ "소스 대문자.cpp" };

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out},
		[]( char c ) {
			if (isdigit( c ))
				c = '*';
			return c;
		});
	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 748
저장시간: 2022-03-23 18:15:45 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 숫자를 *로 바꿔
// 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{cout},
		[]( char c ) {
			if (isdigit( c ))
				c = '*';
			return c;
		});
	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 724
저장시간: 2022-03-23 18:16:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 숫자를 *로 바꿔
// 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{cout},
		[]( char c ) {
			c += 1;
			return c;
		});
	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 724
저장시간: 2022-03-23 18:16:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 숫자를 *로 바꿔
// 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{cout},
		[]( char c ) {
			c += 1;
			return c;
		});
	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 747
저장시간: 2022-03-23 18:17:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "소스.cpp"를 읽어서
// 숫자를 *로 바꿔
// 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };			// RAII

	transform( istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{cout},
		[]( char c ) {
			if ( isalnum(c ))
				c += 1;
			return c;
		});
	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 816
저장시간: 2022-03-23 18:37:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include "save.h"
using namespace std;

// [문제] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int i{}; i < numbers.size( ); ++i)
		numbers[i] = uid( dre );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 885
저장시간: 2022-03-23 18:39:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include "save.h"
using namespace std;

// [문제] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << number;


	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 893
저장시간: 2022-03-23 18:39:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include "save.h"
using namespace std;

// [문제] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << number << "\t";


	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 923
저장시간: 2022-03-23 18:40:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include "save.h"
using namespace std;

// [문제] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:20}", number );


	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1105
저장시간: 2022-03-23 18:41:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:20}", number );

	sort( numbers.begin( ), numbers.end( ) );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:20}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1122
저장시간: 2022-03-23 18:44:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( numbers.begin( ), numbers.end( ) );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1122
저장시간: 2022-03-23 18:46:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( numbers.begin( ), numbers.end( ) );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1122
저장시간: 2022-03-23 18:54:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( numbers.begin( ), numbers.end( ) );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1165
저장시간: 2022-03-23 19:01:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( numbers.begin( ), numbers.end( ), [](int a, int b) { 
		return a > b;
		} );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1160
저장시간: 2022-03-23 19:02:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };

//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( &numbers[0], &numbers[100], []( int a, int b ) {
		return a > b;
		} );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1183
저장시간: 2022-03-23 19:05:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] [1, 100] 랜덤 int 100개를 생성하라
// 오름차순으로 정렬하라. sort
// 정렬한 int 100개를 생성하라. (10분간)


default_random_engine dre;
uniform_int_distribution uid{ 1, 100 };


bool 내림( int a, int b )
{
	return a > b;
}



//---------
int main( )
//---------
{
	array<int, 100> numbers;

	for (int& number : numbers)
		number = uid( dre );

	cout << "정렬하기 전" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	sort( numbers.begin(), numbers.end(), 내림 );

	cout << endl;
	cout << "정렬한 후" << endl;
	for (int number : numbers)
		cout << format( "{:4}", number );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 664
저장시간: 2022-03-23 19:06:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// 메모리 마지막 동네 소개

void f( ) {
	cout << "f 호출" << endl;
}

//---------
int main( )
//---------
{
	f( );
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 778
저장시간: 2022-03-23 19:14:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.23 수910          수910목56                 (3주 2일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <format>
#include <algorithm>
#include "save.h"
using namespace std;

// 메모리 마지막 동네 소개

void f( ) {
	cout << "f 호출" << endl;
}

//---------
int main( )
//---------
{
	f( );
	save( "소스.cpp" );


	cout << addressof( f ) << endl;
	cout << addressof( main ) << endl;
	cout << addressof( save ) << endl;

}


파일이름: 소스.cpp
파일크기: 705
저장시간: 2022-03-24 13:37:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	// 함수이름이란? - 명령어들의 집합인 함수가 기록되어 있는 CODE 세그먼트의
	// 시작번지이다.
	// 함수의 이름의 자료형(data type)은 무엇입니까?

	auto x = main;
	cout << typeid(x).name( ) << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 659
저장시간: 2022-03-24 13:39:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	// 함수의 이름의 자료형(data type)은 무엇입니까?

	int n;
	double a;
	class Dog {};
	Dog d;

	int aa[100];
	cout << typeid(aa).name( ) << endl;


	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 805
저장시간: 2022-03-24 13:55:02 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

void slide( ) {
	cout << "슬라이드" << endl;
}

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	while (true) {
		p( );

		this_thread::sleep_for( 1s );
	}
}


파일이름: 소스.cpp
파일크기: 935
저장시간: 2022-03-24 13:56:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

void slide( ) {
	cout << "슬라이드" << endl;
}

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	while (true) {
		p( );

		this_thread::sleep_for( 1s );

		// 3초마다 toggle
		int cnt{};
		if ((++cnt % 3) == 0) {
			if (p == jump)
				p = slide;
			else
				p = jump;
		}

	}
}


파일이름: 소스.cpp
파일크기: 934
저장시간: 2022-03-24 13:57:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

void slide( ) {
	cout << "슬라이드" << endl;
}

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	int cnt{};
	while (true) {
		p( );

		this_thread::sleep_for( 1s );

		// 3초마다 toggle
		if ((++cnt % 3) == 0) {
			if (p == jump)
				p = slide;
			else
				p = jump;
		}

	}
}


파일이름: 소스.cpp
파일크기: 926
저장시간: 2022-03-24 14:02:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

int g;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	int cnt{};

	int* f = new int;

	cout << "CODE - ";
	cout << "DATA - " ;
	cout << "STACK - p" << addressof( p ) << endl;
	cout << "STACK - f" << addressof( f ) << endl;
	cout << "Free Store - *f" << addressof( *f );

}


파일이름: 소스.cpp
파일크기: 1230
저장시간: 2022-03-24 14:06:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

int g;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	int cnt{};

	int* f = new int;

	cout << "CODE       -  jump " << addressof(jump ) << endl;
	cout << "CODE       -  main " << addressof(main ) << endl;
	cout << "CODE       -  save " << addressof(save ) << endl;
	cout << "CODE       -  p점프" << endl;
	cout << endl;
	cout << "DATA       -  g    " << addressof( g );
	cout << endl;
	cout << "STACK      -  p    " << addressof( p ) << endl;
	cout << "STACK      -  f    " << addressof( f ) << endl;
	cout << endl;
	cout << "Free Store - *f    " << addressof( *f );

}


파일이름: 소스.cpp
파일크기: 1238
저장시간: 2022-03-24 14:07:43 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

int g;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	int cnt{};

	int* f = new int;

	cout << "CODE       -  jump " << addressof(jump ) << endl;
	cout << "CODE       -  main " << addressof(main ) << endl;
	cout << "CODE       -  save " << addressof(save ) << endl;
	cout << "CODE       -  p점프" << endl;
	cout << endl;
	cout << "DATA       -  g    " << addressof( g ) << endl;
	cout << endl;
	cout << "STACK      -  p    " << addressof( p ) << endl;
	cout << "STACK      -  f    " << addressof( f ) << endl;
	cout << endl;
	cout << "Free Store - *f    " << addressof( *f );

}


파일이름: 소스.cpp
파일크기: 1255
저장시간: 2022-03-24 14:08:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장

void jump( ) {
	cout << "점프" << endl;
}

int g;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	void(*p)(void) = jump;

	int cnt{};

	int* f = new int;

	cout << "CODE       -  jump " << addressof(jump ) << endl;
	cout << "CODE       -  main " << addressof(main ) << endl;
	cout << "CODE       -  save " << addressof(save ) << endl;
	cout << "CODE       -  *p   " << addressof(*p) << endl;
	cout << endl;
	cout << "DATA       -  g    " << addressof( g ) << endl;
	cout << endl;
	cout << "STACK      -  p    " << addressof( p ) << endl;
	cout << "STACK      -  f    " << addressof( f ) << endl;
	cout << endl;
	cout << "Free Store - *f    " << addressof( *f );

}


파일이름: 소스.cpp
파일크기: 714
저장시간: 2022-03-24 14:16:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	[]( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
	}();

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 735
저장시간: 2022-03-24 14:17:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	(   
		[]( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
		}
	 )
		
	();

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 756
저장시간: 2022-03-24 14:19:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	cout << typeid(
		[]( ) {
			cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
		}
	).name() << endl;
		

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 762
저장시간: 2022-03-24 14:20:39 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	auto x = []( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
	};
		
	cout << typeid(x).name( ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 762
저장시간: 2022-03-24 14:21:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	auto x = []( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
	};
		
	cout << typeid(x).name( ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 825
저장시간: 2022-03-24 14:22:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

//---------
int main( )
//---------
{
	auto x = []( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
	};
		
	cout << typeid(x).name( ) << endl;


	class Dog {};

	cout << typeid(Dog).name( ) << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 822
저장시간: 2022-03-24 14:23:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

class Dog {};

//---------
int main( )
//---------
{
	auto x = []( ) {
		cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
	};
		
	cout << typeid(x).name( ) << endl;

	cout << typeid(Dog).name( ) << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 762
저장시간: 2022-03-24 14:23:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <thread>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda)

auto x = []( ) {
	cout << "반가워! 난 람다라고 해! 사이좋게 지내!" << endl;
};

//---------
int main( )
//---------
{
	
	cout << typeid(x).name( ) << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 946
저장시간: 2022-03-24 14:37:48 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

//---------
int main( )
//---------
{
	// 람다는 어디서 어떻게 사용되나?
	array<int, 5 > a{ 3, 1, 5, 2, 4 };

	sort( a.begin( ), a.end( ), []( int a, int b ) {
		return a > b;
		} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1008
저장시간: 2022-03-24 14:40:30 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

//---------
int main( )
//---------
{
	// 람다는 어디서 어떻게 사용되나?
	array<int, 5 > a{ 3, 1, 5, 2, 4 };

	sort( a.begin( ), a.end( ), []( int a, int b ) {
		cout << "람다를 이용해서 " << a << " - " << b << endl;
		return a > b;
		} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1008
저장시간: 2022-03-24 14:41:04 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

//---------
int main( )
//---------
{
	// 람다는 어디서 어떻게 사용되나?
	array<int, 5 > a{ 5, 4, 3, 2, 1 };

	sort( a.begin( ), a.end( ), []( int a, int b ) {
		cout << "람다를 이용해서 " << a << " - " << b << endl;
		return a > b;
		} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1162
저장시간: 2022-03-24 14:45:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

class Dog {
public:
	bool operator()( int a, int b ) {
		return a < b;
	}
};


//---------
int main( )
//---------
{
	Dog dog;

	cout << boolalpha << dog( 1, 2 ) << endl;





	// 람다는 어디서 어떻게 사용되나?
	array<int, 5 > a{ 5, 4, 3, 2, 1 };

	sort( a.begin( ), a.end( ), []( int a, int b ) {
		cout << "람다를 이용해서 " << a << " - " << b << endl;
		return a > b;
		} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 962
저장시간: 2022-03-24 14:46:44 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

class Dog {
public:
	bool operator()( int a, int b ) {
		return a < b;
	}
};

//---------
int main( )
//---------
{
	array<int, 5 > a{ 5, 4, 3, 2, 1 };

	sort( a.begin( ), a.end( ), Dog{} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 980
저장시간: 2022-03-24 14:47:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

class Dog {
public:
	bool operator()( int a, int b ) {
		cout << "멍!";
		return a < b;
	}
};

//---------
int main( )
//---------
{
	array<int, 5 > a{ 5, 4, 3, 2, 1 };

	sort( a.begin( ), a.end( ), Dog{} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 980
저장시간: 2022-03-24 14:47:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

class Dog {
public:
	bool operator()( int a, int b ) {
		cout << "멍!";
		return a > b;
	}
};

//---------
int main( )
//---------
{
	array<int, 5 > a{ 5, 4, 3, 2, 1 };

	sort( a.begin( ), a.end( ), Dog{} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1015
저장시간: 2022-03-24 14:48:30 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.24 목56          수910목56                 (4주 1일)
// 
// 호출가능타입(Callable type) - sort를 통해 알아본다	
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
using namespace std;

// 호출가능(Callable) 타입(type)
// 1. 함수포인터 - CODE에서 해당함수의 시작번지를 저장
// 2. 람다(lambda) - 컴파일러가 만드는 class이다. (? class가 호출가능?)
// 3. ()을 오버로딩한 class;

class Dog {
public:
	bool operator()( int a, int b ) {
		cout << "멍!";
		return a > b;
	}
};

//---------
int main( )
//---------
{
	array<int, 20 > a{ 5, 4, 3, 2, 1, 324, 3, 3, 3, 3, 3, 3, 325, 3322 };

	sort( a.begin( ), a.end( ), Dog{} );

	for (int n : a)
		cout << n << ' ';
	cout << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1335
저장시간: 2022-03-30 17:33:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4
	char* p;		// 8	
	int id;			// 4
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1335
저장시간: 2022-03-30 17:34:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4
	int id;			// 4
	char* p;		// 8	
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1341
저장시간: 2022-03-30 17:35:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4(8)
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1540
저장시간: 2022-03-30 17:52:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;		// 8
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };

	cout << a << endl;
	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1557
저장시간: 2022-03-30 17:52:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;		// 8
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };

	cout << a << endl;
	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1948
저장시간: 2022-03-30 18:22:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };

	cout << a + b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1964
저장시간: 2022-03-30 18:24:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1960
저장시간: 2022-03-30 18:25:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2357
저장시간: 2022-03-30 18:30:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2358
저장시간: 2022-03-30 18:31:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a ;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:31:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:33:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:34:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2425
저장시간: 2022-03-30 18:37:57 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
// 
// 컴파일러 최적화 - RVO(리턴시 복사생성x), copy ellision
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 482
저장시간: 2022-03-30 18:51:18 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 528
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
	save( "STRING.h" );
	save( "STRING.cpp" );
}



파일이름: STRING.h
파일크기: 868
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------
#pragma once

#include <iostream>

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( );
	STRING( const char* s );
	~STRING( );
	
	STRING( const STRING& other );
	STRING& operator=( const STRING& other );

	STRING operator+( const STRING& rhs ) const;
	
	void print( const char* s ) const;

	friend std::ostream& operator<<( std::ostream&, const STRING& );
};



파일이름: STRING.cpp
파일크기: 1866
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------

#include <iostream>
#include "STRING.h"

bool 관찰{ false };						// 관찰메시지를 보려면 true
int STRING::gid{ };						// class static


STRING::STRING( ) : num{}, p{}, id{ ++gid } 
{
	if (관찰)
		print( "디폴트" );
}

STRING::STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } 
{
	p = new char[num];
	memcpy( p, s, num );

	if (관찰)
		print( "생성자(*)" );
}

STRING::~STRING( ) 
{
	if (관찰)
		print( "소멸자" );

	if (num)
		delete[] p;
}

STRING::STRING( const STRING& other ) : id{ ++gid }, num{ other.num } 
{
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사생성" );
}

STRING& STRING::operator=( const STRING& other ) 
{
	if (this == &other)
		return *this;

	if (num)
		delete[] p;

	num = other.num;
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사할당" );
}

STRING STRING::operator+( const STRING& rhs ) const 
{
	STRING temp;					// 임시객체를 만들어 더한후 리턴	
	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy( temp.p, p, num );
	memcpy( temp.p + num, rhs.p, rhs.num );
	return temp;
}

void STRING::print( const char* s ) const 
{
	std::cout << s << " [" << id << "] 객체:" << this;
	if (num)
		std::cout << " - 자원:" << num << " 주소:" << (void*)p;
	else
		std::cout << " - 자원없음";
	std::cout << std::endl;
}

std::ostream& operator<<( std::ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};

파일이름: 소스.cpp
파일크기: 520
저장시간: 2022-03-30 18:54:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 605
저장시간: 2022-03-30 19:04:02 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (int i{}; i < a.size( ); ++i)
		cout << a[i] << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 587
저장시간: 2022-03-30 19:04:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto x : a)
		cout << x << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 602
저장시간: 2022-03-30 19:05:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 603
저장시간: 2022-03-30 19:06:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 611
저장시간: 2022-03-30 19:07:05 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 778
저장시간: 2022-03-30 19:10:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	// 관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	// 길이 오름차순으로 a를 정렬하라
	sort( a.begin( ), a.end( ), []( STRING a, STRING b ) {
		return a.getNum( ) < b.getNum( );
		} );


	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 775
저장시간: 2022-03-30 19:11:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	// 길이 오름차순으로 a를 정렬하라
	sort( a.begin( ), a.end( ), []( STRING a, STRING b ) {
		return a.getNum( ) < b.getNum( );
		} );


	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 528
저장시간: 2022-03-31 13:33:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	array<int, 10> a;

	cout << "array<>의 크기 - " << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 543
저장시간: 2022-03-31 13:33:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	array<int, 10> a;

	cout << "array<>의 크기 - " << sizeof( a ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 574
저장시간: 2022-03-31 13:35:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class T, int N>
class Array {
	T data[N];
public:
	Array( ) {
	}
};

//---------
int main( )
//---------
{
	Array<int, 10> a;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 620
저장시간: 2022-03-31 13:36:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class T, int N>
class Array {
	T data[N];
public:
	Array( ) {
	}
};

//---------
int main( )
//---------
{
	Array<int, 10> a;

	cout << "크기 - " << sizeof( a ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 570
저장시간: 2022-03-31 14:15:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	cout << *a.begin( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 611
저장시간: 2022-03-31 14:16:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	array<int,10>::iterator p = a.begin( );
	++p;
	p != a.end( );
	*p;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 647
저장시간: 2022-03-31 14:19:30 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (array<int, 10>::iterator i = a.begin( ); i != a.end( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 627
저장시간: 2022-03-31 14:20:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.begin( ); i != a.end( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 629
저장시간: 2022-03-31 14:22:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 628
저장시간: 2022-03-31 14:23:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	auto i = a.cbegin( );
	while (i != a.cend( ))
		cout << *i++ << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 631
저장시간: 2022-03-31 14:39:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.crbegin( ); i != a.crend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 629
저장시간: 2022-03-31 14:39:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 652
저장시간: 2022-03-31 14:41:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	a.fill( 33333 );


	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 653
저장시간: 2022-03-31 14:42:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	a.fill( 0xcccc );


	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 534
저장시간: 2022-03-31 14:43:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	int a[10];

	cout << a[-1] << endl;
	cout << a[10] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 649
저장시간: 2022-03-31 14:45:49 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		cout << num << "번째 값은 - " << a[num] << endl;
	}

}

파일이름: 소스.cpp
파일크기: 652
저장시간: 2022-03-31 14:48:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		cout << num << "번째 값은 - " << a.at(num) << endl;
	}

}

파일이름: 소스.cpp
파일크기: 734
저장시간: 2022-03-31 14:50:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << e.what( ) << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:58:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 743
저장시간: 2022-03-31 14:59:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (int i = v.size(); 0 < i; --i )
		cout << v[i-1] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 752
저장시간: 2022-03-31 14:59:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (auto i = v.crbegin( ); i < v.crend( ); ++i)
		cout << *i << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 866
저장시간: 2022-03-31 15:06:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] "소스.cpp"를 공백까지 전부 vector에 저장하라.
// 화면에 vector의 char를 모두 출력하라 

//---------
int main( )
//---------
{
	vector<char> v;

	ifstream in{ "소스.cpp" };
	in >> noskipws;

	char c;
	while ( in >> c )
		v.push_back( c );

	for (char c : v)
		cout << c;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 782
저장시간: 2022-03-31 15:17:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 단어(string)를 키보드(cin)에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라.

//---------
int main( )
//---------
{
	vector<string> v;

	string s;
	while ( cin >> s )
		v.push_back( s );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 883
저장시간: 2022-03-31 15:19:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 단어(string)를 키보드(cin)에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라.

//---------
int main( )
//---------
{
	vector<string> v;

	string s;
	while ( cin >> s )
		v.push_back( s );

	sort( v.begin( ), v.end( ) );

	for (string s : v)
		cout << s << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 792
저장시간: 2022-04-06 18:09:38 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v;

	int num;
	while ( cin >> num )
		v.push_back( num );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 792
저장시간: 2022-04-06 18:10:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v;

	int num;
	while ( cin >> num )
		v.push_back( num );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 956
저장시간: 2022-04-06 18:12:04 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v;

	int num;
	while ( cin >> num )
		v.push_back( num );

	long long sum{ };

	for (const int& num : v)
		sum += num;

	cout << "합계 - " << sum << endl;
	cout << "평균 - " << (double)sum / v.size( ) << endl;



	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 801
저장시간: 2022-04-06 18:18:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v;

	cout << "담을 수 있는 최대 int 수 - " << v.max_size( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 807
저장시간: 2022-04-06 18:19:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<STRING> v;

	cout << "담을 수 있는 최대 STRING 수 - " << v.max_size( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 841
저장시간: 2022-04-06 18:19:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v;

	cout << "담을 수 있는 최대 STRING 수 - " << v.max_size( ) << endl;
	//768614336404564650  - STRING
	// 
	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 816
저장시간: 2022-04-06 18:22:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3 };

	cout << "벡터가 메모리에 차지하는 크기 - " << sizeof( v ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 880
저장시간: 2022-04-06 18:32:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3 };

	cout << "원소 갯수 - " << endl;
	cout << "데이터 위치 - " << endl;
	cout << "용량(재할당없이 저장할 수 있는 원소 수 - " << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 887
저장시간: 2022-04-06 18:33:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3 };

	cout << "원소 갯수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data()  << endl;
	cout << "용량 - " << v.capacity() << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1069
저장시간: 2022-04-06 18:34:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3 };

	cout << "원소 갯수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data()  << endl;
	cout << "용량 - " << v.capacity() << endl;

	v.push_back( 4 );

	cout << endl;
	cout << "원소 갯수 - " << v.size( ) << endl;
	cout << "데이터 위치 - " << v.data( ) << endl;
	cout << "용량 - " << v.capacity( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1072
저장시간: 2022-04-06 18:35:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3, 4 };

	cout << "원소 갯수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data()  << endl;
	cout << "용량 - " << v.capacity() << endl;

	v.push_back( 4 );

	cout << endl;
	cout << "원소 갯수 - " << v.size( ) << endl;
	cout << "데이터 위치 - " << v.data( ) << endl;
	cout << "용량 - " << v.capacity( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1254
저장시간: 2022-04-06 18:36:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 키보드에서 int를 그만 할때까지 입력받아라.
// 합계와 평균을 화면 출력하라.

//---------
int main( )
//---------
{
	vector<int> v { 1, 2, 3, 4 };

	cout << "원소 갯수 - " << v.size() << endl;
	cout << "데이터 위치 - " << v.data()  << endl;
	cout << "용량 - " << v.capacity() << endl;

	v.push_back( 4 );

	cout << endl;
	cout << "원소 갯수 - " << v.size( ) << endl;
	cout << "데이터 위치 - " << v.data( ) << endl;
	cout << "용량 - " << v.capacity( ) << endl;

	v.push_back( 5 );

	cout << endl;
	cout << "원소 갯수 - " << v.size( ) << endl;
	cout << "데이터 위치 - " << v.data( ) << endl;
	cout << "용량 - " << v.capacity( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 686
저장시간: 2022-04-06 18:52:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	STRING{ "12345" };

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 690
저장시간: 2022-04-06 18:54:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	new STRING{ "12345" };

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 696
저장시간: 2022-04-06 18:56:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ "12345" };

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 696
저장시간: 2022-04-06 19:03:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ "12345" };

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 726
저장시간: 2022-04-06 19:03:56 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ "12345" };

	v.push_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 729
저장시간: 2022-04-06 19:09:57 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ "12345" };

	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 739
저장시간: 2022-04-06 19:10:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.6 수910          수910목56                 (5주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ "12345" };

	v.emplace_back( STRING{ "1234567" } );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 736
저장시간: 2022-04-07 13:50:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ STRING{"12345"} };

	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 736
저장시간: 2022-04-07 13:51:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v{ STRING{"12345"} };

	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 773
저장시간: 2022-04-07 13:55:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;
	v.reserve( 10 );
	
	v.push_back( STRING{ "12345" } );
	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 776
저장시간: 2022-04-07 13:56:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;
	v.reserve( 10 );
	
	v.emplace_back( STRING{ "12345" } );
	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 766
저장시간: 2022-04-07 13:56:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;
	v.reserve( 10 );
	
	v.emplace_back( "12345" );
	v.emplace_back( "1234567" );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 757
저장시간: 2022-04-07 13:57:49 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;

	v.push_back( "1" );
	v.push_back( "12" );
	v.push_back( "123" );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 757
저장시간: 2022-04-07 14:06:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;

	v.push_back( "1" );
	v.push_back( "12" );
	v.push_back( "123" );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 757
저장시간: 2022-04-07 14:18:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	vector<STRING> v;

	v.push_back( "1" );
	v.push_back( "12" );
	v.push_back( "123" );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 910
저장시간: 2022-04-07 14:35:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v { "1", "333", "22", "55555", "4444" };
	
	// [문제] 길이 오름차순 정렬

	관찰 = true;
	sort( v.begin( ), v.end( ), []( const STRING& a, const STRING& b ) {
		return a.getNum( ) < b.getNum( );
		} );
	관찰 = false;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 975
저장시간: 2022-04-07 14:36:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v { "1", "333", "22", "55555", "4444" };
	
	// [문제] 길이 오름차순 정렬

	관찰 = true;
	sort( v.begin( ), v.end( ), []( const STRING& a, const STRING& b ) {
		return a.getNum( ) < b.getNum( );
		} );
	관찰 = false;

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 975
저장시간: 2022-04-07 14:37:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v { "1", "333", "22", "55555", "4444" };
	
	// [문제] 길이 오름차순 정렬

	관찰 = true;
	sort( v.begin( ), v.end( ), []( const STRING& a, const STRING& b ) {
		return a.getNum( ) < b.getNum( );
		} );
	관찰 = false;

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 835
저장시간: 2022-04-07 14:42:00 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 4, 5 };

	// [문제] 1, 2 뒤 3을 껴 넣어서 1, 2, 3, 4, 5
	v.insert( v.begin( ) + 2, 3 );

	for (int n : v)
		cout << n << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 871
저장시간: 2022-04-07 14:57:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 4, 5, 6, 7, 8, 9, 10 };

	// [문제] v에서 짝수를 제거(remove)하라.
	remove( "소스 대문자.cpp" );



	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 915
저장시간: 2022-04-07 15:01:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 4, 5, 6, 7, 8, 9, 10 };

	// [문제] v에서 짝수를 제거(remove)하라.
	remove_if( v.begin( ), v.end( ), []( int n ) {
		return (!(n & 1));
	});


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 918
저장시간: 2022-04-07 15:02:08 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

	// [문제] v에서 짝수를 제거(remove)하라.
	remove_if( v.begin( ), v.end( ), []( int n ) {
		return (!(n & 1));
	});


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 953
저장시간: 2022-04-07 15:14:38 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

	// [문제] v에서 짝수를 제거(remove)하라.
	auto p = remove_if( v.begin( ), v.end( ), []( int n ) {
		return (!(n & 1));
	});

	v.erase( p, v.end( ) );

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 939
저장시간: 2022-04-07 15:15:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

	// [문제] v에서 짝수를 제거(remove)하라.
	v.erase( remove_if( v.begin( ), v.end( ), []( int n ) {
		return (!(n & 1));
		} ), v.end( ) );

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 813
저장시간: 2022-04-07 15:17:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.7 목56          수910목56                 (6주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
// 
// 중간시험 예정 - 4.27 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector v{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

	erase( v, 7 );

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1197
저장시간: 2022-04-13 17:42:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

// [문제] "소스.cpp"를 읽어 영문자 갯수를 세라
// 다음과 같이 출력하라
// 대소문자 구분하지 않음
// [a] - 10
// [b] - 7
//
// [z] - 3


//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };

	// 여기에 들어갈 코드를 답지에 적어라. z의 갯수를 답지에도 적어라.

	char c;
	array<int, 26> arr;

	while (in >> c)
		if (isalpha( c ))
			arr[ tolower(c) - 'a']++;

	for (int i = 0; i < arr.size( ); ++i)
		cout << "[" << i + 'a' << "] - " << arr[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1200
저장시간: 2022-04-13 17:42:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

// [문제] "소스.cpp"를 읽어 영문자 갯수를 세라
// 다음과 같이 출력하라
// 대소문자 구분하지 않음
// [a] - 10
// [b] - 7
//
// [z] - 3


//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };

	// 여기에 들어갈 코드를 답지에 적어라. z의 갯수를 답지에도 적어라.

	char c;
	array<int, 26> arr {};

	while (in >> c)
		if (isalpha( c ))
			arr[ tolower(c) - 'a']++;

	for (int i = 0; i < arr.size( ); ++i)
		cout << "[" << i + 'a' << "] - " << arr[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1219
저장시간: 2022-04-13 17:43:39 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

// [문제] "소스.cpp"를 읽어 영문자 갯수를 세라
// 다음과 같이 출력하라
// 대소문자 구분하지 않음
// [a] - 10
// [b] - 7
//
// [z] - 3


//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };

	// 여기에 들어갈 코드를 답지에 적어라. z의 갯수를 답지에도 적어라.

	char c;
	array<int, 26> arr {};

	while (in >> c)
		if (isalpha( c ))
			arr[ tolower(c) - 'a']++;

	for (int i = 0; i < arr.size( ); ++i)
		cout << "[" << static_cast<char>(i + 'a') << "] - " << arr[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1222
저장시간: 2022-04-13 17:44:10 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

// [문제] "소스.cpp"를 읽어 영문자 갯수를 세라
// 다음과 같이 출력하라
// 대소문자 구분하지 않음
// [a] - 10
// [b] - 7
//
// [z] - 3


//---------kkk
int main( )
//---------
{
	ifstream in{ "소스.cpp" };

	// 여기에 들어갈 코드를 답지에 적어라. z의 갯수를 답지에도 적어라.

	char c;
	array<int, 26> arr {};

	while (in >> c)
		if (isalpha( c ))
			arr[ tolower(c) - 'a']++;

	for (int i = 0; i < arr.size( ); ++i)
		cout << "[" << static_cast<char>(i + 'a') << "] - " << arr[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1206
저장시간: 2022-04-13 17:44:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

// [문제] "소스.cpp"를 읽어 영문자 갯수를 세라
// 다음과 같이 출력하라
// 대소문자 구분하지 않음
// [a] - 10
// [b] - 7
//
// [z] - 3


//---------
int main( )
//---------
{
	ifstream in{ "소스.cpp" };

	// 여기에 들어갈 코드를 답지에 적어라. z의 갯수를 답지에도 적어라.

	char c;
	array<int, 26> arr {};

	while (in >> c)
		if (isalpha( c ))
			arr[ tolower(c) - 'a']++;

	for (int i = 0; i < arr.size( ); ++i)
		cout << "[" << char(i + 'a') << "] - " << arr[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 805
저장시간: 2022-04-13 17:48:18 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 931
저장시간: 2022-04-13 18:04:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.
	auto p = v.cend();
	--p;
	--p;

	v.insert( p, STRING{"333"} );


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 899
저장시간: 2022-04-13 18:07:20 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	v.insert( v.cend()----, "333" );


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 903
저장시간: 2022-04-13 18:07:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	v.insert( ----v.cend()----, "333" );


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 911
저장시간: 2022-04-13 18:07:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	v.insert( ----v.cend()------------, "333" );


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 900
저장시간: 2022-04-13 18:08:49 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	v.insert( v.cend() -= 2, "333" );


	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 929
저장시간: 2022-04-13 18:09:30 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	관찰 = true;
	v.insert( v.cend() -= 2, "333" );
	관찰 = false;

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 929
저장시간: 2022-04-13 18:14:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	vector<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	관찰 = true;
	v.insert( v.cend() -= 2, "333" );
	관찰 = false;

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 947
저장시간: 2022-04-13 18:15:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	list<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	관찰 = true;
	v.insert( ----v.cend(), "333" );
	관찰 = false;

	//for (int i = 0; i < v.size( ); ++i)
	//	cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 930
저장시간: 2022-04-13 18:16:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	list<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	관찰 = true;
	v.insert( ----v.cend(), "333" );
	관찰 = false;

	for (const STRING& s : v)
		cout << s << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 930
저장시간: 2022-04-13 18:18:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	list<STRING> v{ "1", "22", "4444", "55555" };

	// [문제] "22"와 "4444"사이에 "333"을 끼워 넣어라.

	관찰 = true;
	v.insert( ----v.cend(), "333" );
	관찰 = false;

	for (const STRING& s : v)
		cout << s << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 791
저장시간: 2022-04-13 18:22:39 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	deque<int> d;

	cout << sizeof( d ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 964
저장시간: 2022-04-13 18:41:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show( ) const {
		cout << this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	vector<Test> v { 10 };



	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 991
저장시간: 2022-04-13 18:42:10 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show( ) const {
		cout << this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	vector<Test> v { 10 };
	cout << v.size( ) << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1019
저장시간: 2022-04-13 18:43:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];

public:
	void show( ) const {
		cout << this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	vector<Test> v ( 10 );

	for (int i = 0; i < v.size( ); ++i)
		v[i].show( );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1031
저장시간: 2022-04-13 18:44:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[10000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	vector<Test> v ( 10 );

	for (int i = 0; i < v.size( ); ++i)
		v[i].show( );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1030
저장시간: 2022-04-13 18:45:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	vector<Test> v ( 10 );

	for (int i = 0; i < v.size( ); ++i)
		v[i].show( );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1029
저장시간: 2022-04-13 18:46:11 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	deque<Test> v ( 10 );

	for (int i = 0; i < v.size( ); ++i)
		v[i].show( );


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1047
저장시간: 2022-04-13 18:47:21 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	deque<int> v ( 10 );

	for (int i = 0; i < v.size( ); ++i)
		cout << addressof(v[i]) << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1072
저장시간: 2022-04-13 18:49:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	deque<int> v ( 10 );

	v.push_front( 333 );

	for (int i = 0; i < v.size( ); ++i)
		cout << addressof(v[i]) << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1071
저장시간: 2022-04-13 18:50:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1000];

public:
	void show( ) const {
		cout << (long long)this << endl;
	}
};

//---------
int main( )
//---------
{
	// [확인] vector는 연속되어있는데 deque는 메모리가 연속되어 있지 않다고?
	deque<int> v ( 10 );

	v.push_back( 333 );

	for (int i = 0; i < v.size( ); ++i)
		cout << addressof(v[i]) << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 922
저장시간: 2022-04-13 18:59:48 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];
};

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [확인 2] vector보다 deque가 더 많은 원소를 저장한다고?

	vector<Test> v;

	while (true)
		v.push_back( Test{} );

}

파일이름: 소스.cpp
파일크기: 1063
저장시간: 2022-04-13 19:03:00 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];
};

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [확인 2] vector보다 deque가 더 많은 원소를 저장한다고?
	// vector 가 저장한 Test 객체 수 -  

	vector<Test> v;

	while (true) {
		try {
			v.push_back( Test{} );
		}
		catch (exception& e) {
			cout << "최대 원소 수 - " << v.size( ) << endl;
		}
	}
}

파일이름: 소스.cpp
파일크기: 1116
저장시간: 2022-04-13 19:05:37 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];
};

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [확인 2] vector보다 deque가 더 많은 원소를 저장한다고?
	// vector가 저장한 Test 객체 수 -  17937985
	// deque이 저장한 Test 객체 수

	deque<Test> v;

	while (true) {
		try {
			v.push_back( Test{} );
		}
		catch (exception& e) {
			cout << "최대 원소 수 - " << v.size( ) << endl;
			return 0;
		}
	}
}

파일이름: 소스.cpp
파일크기: 1222
저장시간: 2022-04-13 19:08:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];
};

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [확인 2] vector보다 deque가 더 많은 원소를 저장한다고?
	// vector가 저장한 Test 객체 수 -  17937985
	// deque이 저장한 Test 객체 수 - 확인불가
	// x86으로 변경 후
	// vector가 저장한 Test 객체 수 -  
	// deque이 저장한 Test 객체 수 - 

	deque<Test> v;

	while (true) {
		try {
			v.push_back( Test{} );
		}
		catch (exception& e) {
			cout << "최대 원소 수 - " << v.size( ) << endl;
			return 0;
		}
	}
}

파일이름: 소스.cpp
파일크기: 1230
저장시간: 2022-04-13 19:09:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.13 수910          수910목56                 (6주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

class Test {
	char c[1024];
};

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [확인 2] vector보다 deque가 더 많은 원소를 저장한다고?
	// vector가 저장한 Test 객체 수 -  17937985
	// deque이 저장한 Test 객체 수 - 확인불가
	// x86으로 변경 후
	// vector가 저장한 Test 객체 수 -  
	// deque이 저장한 Test 객체 수 - 1980734

	vector<Test> v;

	while (true) {
		try {
			v.push_back( Test{} );
		}
		catch (exception& e) {
			cout << "최대 원소 수 - " << v.size( ) << endl;
			return 0;
		}
	}
}

파일이름: 소스.cpp
파일크기: 964
저장시간: 2022-04-14 13:34:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [문제] "소스.cpp"의 단어를 deque에 저장하라
	// 오름차순 정렬하라
	// 출력하라.

	ifstream in{ "소스.cpp" };

	string s;

	cout << boolalpha << (bool)(in >> s) << endl;

}

파일이름: 소스.cpp
파일크기: 1122
저장시간: 2022-04-14 13:44:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [문제] "소스.cpp"의 단어를 deque에 저장하라
	// 오름차순 정렬하라
	// 출력하라.

	ifstream in{ "소스.cpp" };

	string s;

	deque<string> d;

	while (in >> s)
		d.push_back( s );

	sort( d.begin( ), d.end( ) );		// 자동 오름차순(ascending order) 정렬

	for (const string& s : d)
		cout << s << endl;
}

파일이름: 소스.cpp
파일크기: 1193
저장시간: 2022-04-14 13:47:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [문제] "소스.cpp"의 단어를 deque에 저장하라
	// 오름차순 정렬하라
	// 출력하라.

	ifstream in{ "소스.cpp" };

	string s;

	deque<string> d;

	while (in >> s)
		d.push_back( s );

	cout << boolalpha << (string{ "333" } < string{ "44" }) << endl;
	
//	sort( d.begin( ), d.end( ) );		// 오름차순(ascending order) 정렬

//	for (const string& s : d)
//		cout << s << endl;
}

파일이름: 소스.cpp
파일크기: 1194
저장시간: 2022-04-14 13:47:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [문제] "소스.cpp"의 단어를 deque에 저장하라
	// 오름차순 정렬하라
	// 출력하라.

	ifstream in{ "소스.cpp" };

	string s;

	deque<string> d;

	while (in >> s)
		d.push_back( s );

	cout << boolalpha << (string{ "5333" } < string{ "44" }) << endl;
	
//	sort( d.begin( ), d.end( ) );		// 오름차순(ascending order) 정렬

//	for (const string& s : d)
//		cout << s << endl;
}

파일이름: 소스.cpp
파일크기: 1117
저장시간: 2022-04-14 13:49:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	// [문제] "소스.cpp"의 단어를 deque에 저장하라
	// 오름차순 정렬하라
	// 출력하라.

	ifstream in{ "소스.cpp" };

	string s;

	deque<string> d;

	while (in >> s)
		d.push_back( s );

	sort( d.begin( ), d.end( ) );		// 오름차순(ascending order) 정렬

	for (const string& s : d)
		cout << s << endl;
}

파일이름: 소스.cpp
파일크기: 834
저장시간: 2022-04-14 13:50:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ofstream out{ "연습.txt" };


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1061
저장시간: 2022-04-14 13:59:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 후 출력하라.

	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string>{in}, {} };

	sort( d.begin( ), d.end( ) );

	copy( d.begin( ), d.end( ), ostream_iterator<string>{ cout, "\n"} );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1106
저장시간: 2022-04-14 14:03:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 후 출력하라.

	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string>{in}, {} };

	sort( d.begin( ), d.end( ) );

	// d의 각 string을 오름차순으로 정렬하라

	copy( d.begin( ), d.end( ), ostream_iterator<string>{ cout, "\n"} );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1163
저장시간: 2022-04-14 14:06:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	// [문제] "연습.txt"의 단어를 읽어 오름차순 정렬 후 출력하라.

	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string>{in}, {} };

	sort( d.begin( ), d.end( ) );

	// d의 각 string을 오름차순으로 정렬하라
	for (string& s : d)
		sort( s.begin( ), s.end( ) );


	copy( d.begin( ), d.end( ), ostream_iterator<string>{ cout, "\n"} );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1117
저장시간: 2022-04-14 14:19:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque
//		forward_list
//		list
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <deque>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{

	ifstream in{ "연습.txt" };

	deque<string> d{ istream_iterator<string>{in}, {} };

	// "dynamic"은 몇 번째 단어인가?
	auto p = find( d.begin( ), d.end( ), "dynamic" );
	if (p == d.end( )) {
		cout << "없는 단어입니다" << endl;
	}
	else {
		cout << p - d.begin( ) + 1 << "번째 단어입니다" << endl;
	}

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 915
저장시간: 2022-04-14 14:35:07 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	cout << sizeof( cont ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1323
저장시간: 2022-04-14 14:46:39 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라

	// [문제] 앞에서 부터 10개 단어만 출력하라.
	auto p = cont.cbegin( );
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;
	cout << *p << endl;
	++p;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1102
저장시간: 2022-04-14 14:47:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라

	// [문제] 앞에서 부터 10개 단어만 출력하라.
	auto p = cont.cbegin( );

	for (int i{}; i < 10; ++i ) {
		cout << *p << endl;
		++p;
	}

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1091
저장시간: 2022-04-14 14:47:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라

	// [문제] 앞에서 부터 10개 단어만 출력하라.
	auto p = cont.cbegin( );

	for (int i{}; i < 10; ++i ) 
		cout << *p++ << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 950
저장시간: 2022-04-14 14:49:05 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	istream_iterator<string> p{in};

	for (int i{}; i < 10; ++i ) 
		cout << *p++ << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1107
저장시간: 2022-04-14 14:53:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라
	cont.sort( );

	// [문제] 앞에서 부터 10개 단어만 출력하라.
	auto p = cont.cbegin( );

	for (int i{}; i < 10; ++i ) 
		cout << *p++ << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1108
저장시간: 2022-04-14 14:56:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라
	cont.sort( );

	// [문제] 뒤에서 부터 10개 단어만 출력하라.
	auto p = cont.crbegin( );

	for (int i{}; i < 10; ++i ) 
		cout << *p++ << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1112
저장시간: 2022-04-14 14:57:56 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 정렬하라
	cont.sort( );

	// [문제] 뒤에서 부터 10개 단어만 출력하라.
	auto p = cont.cend( );
	--p;

	for (int i{}; i < 10; ++i ) 
		cout << *p-- << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1321
저장시간: 2022-04-14 15:09:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] "dynamic"은 몇 번째 단어인가 출력하라?
	auto p = find( cont.begin( ), cont.end( ), "dynamic" );

	if (p == cont.end( )) {
		cout << "못찾음" << endl;
	}
	else {
		int step{};
		auto beg = cont.begin( );

		while (true) {
			if (beg == p) {
				cout << step + 1 << "번째 단어입니다" << endl;
				break;
			}
			else {
				++beg;
				++step;
			}
		}
	}

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1182
저장시간: 2022-04-14 15:11:07 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] "dynamic"은 몇 번째 단어인가 출력하라?
	auto p = find( cont.begin( ), cont.end( ), "dynamic" );

	if (p == cont.end( )) {
		cout << "못찾음" << endl;
	}
	else
		cout << distance( cont.begin( ), p ) + 1 << "번째 단어" << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1049
저장시간: 2022-04-14 15:14:02 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<char> cont;

	char c;
	while (in >> c)
		cont.push_back( c );

	// [문제] a가 몇 개 있나 출력하라?

	cout << "a의 갯수 - " << count( cont.begin( ), cont.end( ), 'a' ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1049
저장시간: 2022-04-14 15:14:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<char> cont;

	char c;
	while (in >> c)
		cont.push_back( c );

	// [문제] a가 몇 개 있나 출력하라?

	cout << "a의 갯수 - " << count( cont.begin( ), cont.end( ), 'a' ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1058
저장시간: 2022-04-14 15:16:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 글자 수가 5개인것만 화면 출력

	for (const string& s : cont)
		if (s.size( ) == 5)
			cout << s << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 1120
저장시간: 2022-04-14 15:18:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.14 목56          수910목56                 (7주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector			- dynamic size array, O(1) - random access 
//						  중간에 insert하는 동작의 댓가를 알아봤다.
//		deque			
//		forward_list
//		list			- 객체마다 * 2개 사용하여 삽입삭제 O(1)
// 
// 중간시험 - 4.20 수요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <list>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	ifstream in{ "연습.txt" };

	list<string> cont;

	string s;
	while (in >> s)
		cont.push_back( s );

	// [문제] 글자 수가 5개인것만 화면 출력

	copy_if( cont.begin( ), cont.end( ), ostream_iterator<string>{cout, "\n"},
		[]( const string& s ) {
			return s.size( ) == 5;
		} );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 842
저장시간: 2022-04-21 14:46:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 892
저장시간: 2022-04-21 14:48:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	
	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 904
저장시간: 2022-04-21 14:49:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	
	p.operator*( ) = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 892
저장시간: 2022-04-21 14:49:44 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	
	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 898
저장시간: 2022-04-21 14:50:48 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	
	*p = 'A';
	// ++p;
	*p = 'B';
	// ++p;
	*p = 'C';

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 895
저장시간: 2022-04-21 14:51:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	// 출력반복자를 통해 반복자가 제공하는 연산을 이해해본다.
	ostream_iterator<char> p { cout };
	
	p = 'A';
	// ++p;
	p = 'B';
	// ++p;
	p = 'C';

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1056
저장시간: 2022-04-21 14:58:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(Iter).name( ) << endl;;
}

//---------
int main( )
//---------
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// [문제] show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// show를 선언하고 정의하라.

	vector<int> v;

	show( v.begin( ) );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1067
저장시간: 2022-04-21 15:00:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(Iter).name( ) << endl;;
}

//---------
int main( )
//---------
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// [문제] show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// show를 선언하고 정의하라.

	vector<int> v;

	show( v.begin( ) );
	show( 1 );
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1090
저장시간: 2022-04-21 15:07:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name( ) << endl;;
}

//---------
int main( )
//---------
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// [문제] show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// show를 선언하고 정의하라.

	vector<int> v;
	show( v.begin( ) );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1130
저장시간: 2022-04-21 15:08:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name( ) << endl;;
}

//---------
int main( )
//---------
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// [문제] show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// show를 선언하고 정의하라.

	show( istream_iterator<char>{ } );
	show( ostream_iterator<char>{ cout } );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1337
저장시간: 2022-04-21 15:10:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <forward_list>
#include <list>
#include <deque>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name( ) << endl;;
}

//---------
int main( )
//---------
{
	// 반복자를 인자로 받아 어떤 반복자인지 출력해주면 좋겠다.
	// [문제] show 함수는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// show를 선언하고 정의하라.

	show( istream_iterator<char>{ } );
	show( ostream_iterator<char>{ cout } );
	show( forward_list<char>::iterator{} );
	show( list<char>::iterator{} );
	show( deque<char>::iterator{} );
	show( vector<char>::iterator{} );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 894
저장시간: 2022-04-21 15:13:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class Iter>
void show( Iter )
{
	cout << typeid(iterator_traits<Iter>::iterator_category).name( ) << endl;;
}

//---------
int main( )
//---------
{
	int* p{};
	show( p );

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 848
저장시간: 2022-04-21 15:19:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.21 목56          수910목56                 (8주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	STRING s{ "abcdefghijklmnopqrstuvwxyz" };

	for (char c : s)
		cout << c << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 849
저장시간: 2022-04-27 17:36:04 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	STRING s{ "abcdefghijklmnopqrstuvwxyz" };

	for (char c : s)
		cout << c << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 982
저장시간: 2022-04-27 17:38:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while ( in >> num )
		cout << num << endl;
	
//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1001
저장시간: 2022-04-27 17:39:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (!in.eof( )) {
		in >> num;
		cout << num << endl;
	}
	
//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1001
저장시간: 2022-04-27 17:39:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (!in.eof( )) {
		in >> num;
		cout << num << endl;
	}
	
//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1001
저장시간: 2022-04-27 17:40:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (!in.eof( )) {
		in >> num;
		cout << num << endl;
	}
	
//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 923
저장시간: 2022-04-27 17:40:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	ifstream in{ "시험자료.txt" };

	
//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1204
저장시간: 2022-04-27 17:45:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

class Test {
	int id;
	string word;

public:
	void read( ifstream& in ) {
		in >> id >> word;
	}
};

//---------
int main( )
//---------
{
	ifstream in{ "시험자료.txt" };

	vector<Test> v;

	Test temp;
	while (!in.eof( )) {
		temp.read( in );
		v.push_back( temp );
	}
	
	cout << "벡터 갯수 - " << v.size( ) << endl;

//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1360
저장시간: 2022-04-27 17:46:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

class Test {
	int id;
	string word;

public:
	void read( ifstream& in ) {
		in >> id >> word;
	}

	void show( ) const {
		cout << id << " --- " << word << endl;
	}
};

//---------
int main( )
//---------
{
	ifstream in{ "시험자료.txt" };

	vector<Test> v;

	Test temp;
	while (!in.eof( )) {
		temp.read( in );
		v.push_back( temp );
	}

	v[v.size( ) - 1].show( );
	v[v.size( ) - 2].show( );
	v[v.size( ) - 3].show( );

	cout << "벡터 갯수 - " << v.size( ) << endl;

//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1355
저장시간: 2022-04-27 17:48:00 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

class Test {
	int id;
	string word;

public:
	bool read( ifstream& in ) {
		return bool(in >> id >> word);
	}

	void show( ) const {
		cout << id << " --- " << word << endl;
	}
};

//---------
int main( )
//---------
{
	ifstream in{ "시험자료.txt" };

	vector<Test> v;

	Test temp;
	while ( temp.read( in ) ) 
		v.push_back( temp );

	v[v.size( ) - 1].show( );
	v[v.size( ) - 2].show( );
	v[v.size( ) - 3].show( );

	cout << "벡터 갯수 - " << v.size( ) << endl;

//
//	STRING s{ "abcdefghijklmnopqrstuvwxyz" };
//
//	for (char c : s)
//		cout << c << " - ";
//	cout << endl;
//
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 828
저장시간: 2022-04-27 18:03:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{

	STRING s{ "Hello" };

	for (char c : s)
		cout << c << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 877
저장시간: 2022-04-27 18:09:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{

	string s{ "Hello" };

	for (auto i = s.begin( ); i != s.end( ); ++i)
		cout << *i << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 879
저장시간: 2022-04-27 18:10:01 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
//
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{

	string s{ "Hello" };

	for (auto i = s.rbegin( ); i != s.rend( ); ++i)
		cout << *i << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 985
저장시간: 2022-04-27 18:35:39 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{

	STRING s{ "Hello" };

	for (auto i = s.rbegin(); i != s.rend( ); ++i)
		cout << *i << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 985
저장시간: 2022-04-27 18:37:43 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{

	STRING s{ "Hello" };

	for (auto i = s.rbegin(); i != s.rend( ); ++i)
		cout << *i << " - ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 983
저장시간: 2022-04-27 18:55:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	STRING s{ "Hello" };

	for (auto i = s.rbegin( ); i < s.rend( ); ++i)
		cout << *i << "   ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 984
저장시간: 2022-04-27 18:55:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	STRING s{ "Hello" };

	for (auto i = s.rbegin( ); i != s.rend( ); ++i)
		cout << *i << "   ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 984
저장시간: 2022-04-27 18:58:38 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	STRING s{ "Hello" };

	for (auto i = s.rbegin( ); i != s.rend( ); ++i)
		cout << *i << "   ";
	cout << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1009
저장시간: 2022-04-27 19:01:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	string s{ "The quick brown fox jumps over the lazy dog" };

	sort( s.begin( ), s.end( ) );

	cout << s << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1064
저장시간: 2022-04-27 19:02:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	string s{ "The quick brown fox jumps over the lazy dog" };

	sort( s.begin( ), s.end( ) );
	s.erase( unique( s.begin( ), s.end( ) ), s.end( ) );

	cout << s << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1064
저장시간: 2022-04-27 19:02:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.27 수910          수910목56                 (8주 2일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	string s{ "the quick brown fox jumps over the lazy dog" };

	sort( s.begin( ), s.end( ) );
	s.erase( unique( s.begin( ), s.end( ) ), s.end( ) );

	cout << s << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1008
저장시간: 2022-04-28 13:59:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	STRING s{ "the quick brown fox jumps over the lazy dog" };

	sort( s.begin( ), s.end( ) );

	cout << s << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1008
저장시간: 2022-04-28 14:00:02 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	STRING s{ "the quick brown fox jumps over the lazy dog" };

	sort( s.begin( ), s.end( ) );

	cout << s << endl;

	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1133
저장시간: 2022-04-28 14:12:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스.cpp" };
	
	// [문제] 실행되게 하라.
	STRING x[]{ "123", "456", "789", "0ab", "cde" };



	vector<STRING> v{ begin(x )+1, end(x )};
	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1093
저장시간: 2022-04-28 14:20:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스.cpp" };
	
	// [문제] 실행되게 하라.
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };


	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1276
저장시간: 2022-04-28 14:43:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

bool operator<( const STRING& a, const STRING& b )
{
	// 사전식 정렬
	return string( a.begin(), a.end() ) < string( b.begin(), b.end() );
}

//---------
int main( )
//---------
{	
	ifstream in{ "소스.cpp" };
	
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라.					
	sort( v.begin( ), v.end( ) );

	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1129
저장시간: 2022-04-28 14:48:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스.cpp" };
	
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라.					
	sort( v.begin( ), v.end( ) );

	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1234
저장시간: 2022-04-28 14:50:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스.cpp" };
	
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라. 람다에서 길이오름차순					
	sort( v.begin( ), v.end( ), [](const STRING& a, const STRING& b ) { 
		return a.getNum( ) < b.getNum( );
		});

	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1235
저장시간: 2022-04-28 14:52:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스X.cpp" };
	
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	// [문제] v를 정렬하라. 람다에서 길이오름차순					
	sort( v.begin( ), v.end( ), [](const STRING& a, const STRING& b ) { 
		return a.getNum( ) < b.getNum( );
		});

	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1295
저장시간: 2022-04-28 14:54:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	ifstream in{ "소스X.cpp" };
	
	vector<STRING> v{ istream_iterator<STRING>{in}, {} };

	sort( v.begin( ), v.end( ), [](const STRING& a, const STRING& b ) { 
		return a.getNum( ) < b.getNum( );
		});

	// [문제] v의 각 원소를 오름차순으로 정렬하라.					
	for (STRING& s : v)
		sort( s.begin( ), s.end( ) );


	for (auto s : v)
		cout << s << endl;

	
	save( "소스.cpp" );
}


파일이름: 소스.cpp
파일크기: 1357
저장시간: 2022-04-28 14:59:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{	
	save( "소스.cpp" );

	STRING word;
	cout << "단어를 입력하세요: ";
	cin >> word;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: 소스.cpp
파일크기: 1411
저장시간: 2022-04-28 15:10:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{	
	save( "소스.cpp" );

	STRING word;

	관찰 = true;
	cout << "단어를 입력하세요: ";
	cin >> word;
	관찰 = false;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: 소스.cpp
파일크기: 1411
저장시간: 2022-04-28 15:10:49 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{	
	save( "소스.cpp" );

	관찰 = true;
	STRING word;

	cout << "단어를 입력하세요: ";
	cin >> word;
	관찰 = false;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: 소스.cpp
파일크기: 1576
저장시간: 2022-04-28 15:14:18 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;


template <class 반복자, class 값>
반복자 my_find( 반복자 시작, 반복자 끝, 값 찾을값  )
{
	while (시작 != 끝) {
		if (*시작 == 찾을값)
			return 시작;
		++시작;
	}
	return 시작;
}

//---------
int main( )
//---------
{	
	save( "소스.cpp" );

	STRING word;

	cout << "단어를 입력하세요: ";
	cin >> word;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = my_find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: 소스.cpp
파일크기: 1562
저장시간: 2022-04-28 15:16:56 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;


template <class Iter, class Val>
Iter my_find( Iter beg, Iter end, Val val  )
{
	while ( beg != end ) {
		if (*beg == val)
			return beg;
		++beg;
	}
	return end;
}

//---------
int main( )
//---------
{	
	save( "소스.cpp" );

	STRING word;

	cout << "단어를 입력하세요: ";
	cin >> word;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = my_find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: 소스.cpp
파일크기: 1671
저장시간: 2022-04-28 15:29:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		4.28 목56          수910목56                 (9주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
// 2. Associative container
// 
// Iterator - Iterators are a generalization of pointers 
//			  that allow a C++ program to work with different data structures
//			  (for example, containers and ranges) in a uniform manner.
// 
// 역방향반복자 - 반드시 class로 만들어야 한다
//			++연산이 실제로는 왼쪽으로 가야되기 때문이다.
//  
// 5월 5일 목요일 - 수업예정
// 
//  다음시간 - total ordering 이야기 잠깐하고 가자. 
//
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;


template <class Iter, class Val>
Iter my_find( Iter beg, Iter end, Val val  )
{
	while ( beg != end ) {
		if (*beg == val)
			return beg;
		++beg;
	}
	return end;
}

//---------
int main( )
//---------
{	
	save( "소스.cpp" );
	save( "STRING.h" );
	save( "STRING.cpp" );

	STRING word;

	cout << "단어를 입력하세요: ";
	cin >> word;

	// [문제] 어떤 문자가 입력받은 단어의 몇 번째 문자인지 출력하라.
	while (true) {
		cout << "문자를 입력하세요: ";
		char c;
		cin >> c;

		auto p = my_find( word.begin( ), word.end( ), c );
		if (p == word.end( ))
			cout << "없는 글자입니다" << endl;
		else
			cout << c << "는 " << distance( word.begin( ), p ) + 1 << "번째 문자입니다" << endl;
	}

}


파일이름: STRING.h
파일크기: 3344
저장시간: 2022-04-28 15:29:34 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------
#pragma once

#include <iostream>
#include <algorithm>

class STRING_iterator {
public:
	// 표준 반복자가 응답해야할 타입
	using iterator_category = std::random_access_iterator_tag;
	using value_type = char;
	using difference_type = std::ptrdiff_t;
	using pointer = char*;
	using reference = char&;

private:
	char* p;

public:
	STRING_iterator( char* p ) : p { p } { }

	difference_type operator-( const STRING_iterator& rhs ) const {
		return p - rhs.p;
	}

	// 2022. 4. 28 sort 가능하도록 연산자 추가
	auto operator<=>( const STRING_iterator& ) const = default;

	STRING_iterator& operator++( ) {
		++p;
		return *this;
	}

	char& operator*( ) const {
		return *p;
	}

	STRING_iterator& operator--( ) {
		--p;
		return *this;
	}

	STRING_iterator operator+( difference_type d ) const {
		return STRING_iterator{ p + d };
	}

	STRING_iterator operator-( difference_type d ) const {
		return STRING_iterator{ p - d };
	}
};

// 2022. 4. 27 STRING이 제공할 역방향반복자
class STRING_reverse_iterator {
	char* p;

public:
	STRING_reverse_iterator( char* p ) : p{ p } { }

	STRING_reverse_iterator& operator++( ) {
		--p;
		return *this;
	}

	char& operator*( ) const {
		return *(p-1);
	}

	// <, >, <=, >=, ==, != (관계연산자, relational operator)
	// 관계연산자는 우주선연산자로 한번에 해결 - C++20
	// spaceship operator(three-way comparison operator)
	auto operator<=>( const STRING_reverse_iterator& rhs ) const = default;

	bool operator!=( const STRING_reverse_iterator& rhs ) const {
		std::cout << "아마 이게 우선일껄" << "\n";
		return p != rhs.p;
	}
};


class STRING {
public:
	using iterator = STRING_iterator;
	using reverse_iterator = STRING_reverse_iterator;

private:
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( );
	STRING( const char* s );
	~STRING( );
	
	STRING( const STRING& other );
	STRING& operator=( const STRING& other );

	// 2022. 4. 7 이동생성자/이동할당연산자
	STRING( STRING&& other ) noexcept;
	STRING& operator=( STRING&& other ) noexcept;

	STRING operator+( const STRING& rhs ) const;
	
	// 2022. 4. 28 sort를 위해 default < 연산자 제공
	bool operator<( const STRING& rhs ) const {
		return std::lexicographical_compare( begin( ), end( ), 
			rhs.begin( ), rhs.end( ) );
	}


	// 2022. 4. 21 begin(), end() 제공
	iterator begin( ) const {
		return iterator{ p };
	}

	iterator end( ) const {
		return iterator{ p + num };
	}

	reverse_iterator rbegin( ) {
		return reverse_iterator{ p + num };
	}

	reverse_iterator rend( ) {
		return reverse_iterator{ p };
	}



	size_t getNum( ) const {
		return num;
	}

	void print( const char* s ) const;

	friend std::ostream& operator<<( std::ostream&, const STRING& );
	// 2022. 4. 28 추가
	friend std::istream& operator>>( std::istream&, STRING& );
};



파일이름: STRING.cpp
파일크기: 2498
저장시간: 2022-04-28 15:29:34 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------

#include <iostream>
#include "STRING.h"

bool 관찰{ false };						// 관찰메시지를 보려면 true
int STRING::gid{ };						// class static


STRING::STRING( ) : num{}, p{}, id{ ++gid } 
{
	if (관찰)
		print( "디폴트" );
}

STRING::STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } 
{
	p = new char[num];
	memcpy( p, s, num );

	if (관찰)
		print( "생성자(*)" );
}

STRING::~STRING( ) 
{
	if (관찰)
		print( "소멸자" );

	if (num)
		delete[] p;
}

STRING::STRING( const STRING& other ) : id{ ++gid }, num{ other.num } 
{
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사생성" );
}

STRING& STRING::operator=( const STRING& other ) 
{
	if (this == &other)
		return *this;

	if (num)
		delete[] p;

	num = other.num;
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사할당" );
}

// 2022. 4. 7 이동생성자/이동할당연산자
STRING::STRING( STRING&& other ) noexcept : id{++gid}
{
	num = other.num;
	p = other.p;

	other.num = 0;
	other.p = nullptr;

	if (관찰)
		print( "이동생성" );
};

STRING& STRING::operator=( STRING&& other ) noexcept
{
	if (this != &other) {
		if (num)
			delete[] p;

		num = other.num;
		p = other.p;

		other.num = 0;
		other.p = nullptr;
	}

	if (관찰)
		print( "이동할당" );
	return *this;
};

STRING STRING::operator+( const STRING& rhs ) const 
{
	STRING temp;					// 임시객체를 만들어 더한후 리턴	
	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy( temp.p, p, num );
	memcpy( temp.p + num, rhs.p, rhs.num );
	return temp;
}

void STRING::print( const char* s ) const 
{
	std::cout << s << " [" << id << "] 객체:" << this;
	if (num)
		std::cout << " - 자원:" << num << " 주소:" << (void*)p;
	else
		std::cout << " - 자원없음";
	std::cout << std::endl;
}

std::ostream& operator<<( std::ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};

// 2022. 4. 28 추가
std::istream& operator>>( std::istream& is, STRING& s )
{
	std::string str;
	is >> str;
	s = STRING( str.c_str( ) );
	return is;
};