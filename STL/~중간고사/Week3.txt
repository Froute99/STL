

파일이름: 소스.cpp
파일크기: 733
2022-03-16 17:35:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 733
2022-03-16 17:37:11 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for ( int i = 0; i < 1000; ++i )
		cout <<	uid( dre ) << '\t';

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 735
2022-03-16 17:38:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		printf( "%20d\n", uid( dre ) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 749
2022-03-16 17:39:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		; // format( );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 762
2022-03-16 17:41:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		format( "{:80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 770
2022-03-16 17:42:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 771
2022-03-16 17:42:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:<80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 771
2022-03-16 17:43:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:^80}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 770
2022-03-16 17:44:07 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i)
		cout << format( "{:20}", uid(dre) );

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 817
2022-03-16 17:45:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		cout << format( "{:19}", uid( dre ) );
		if ((i % 4) == 0)
			cout << endl;
	}

	cout << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 812
2022-03-16 17:45:37 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		out << format( "{:19}", uid( dre ) );
		if ((i % 4) == 0)
			out << endl;
	}
	out << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 816
2022-03-16 17:46:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <fstream>
#include <format>			// C++20
#include "save.h"
using namespace std;

// [문제] 엔진과 분포를 사용하여 만든 int 1000개를 
// "int 천개.txt" 파일에 저장하라

default_random_engine dre;

//---------
int main( )
//---------
{
	uniform_int_distribution uid;

	ofstream out{ "int 천개.txt" };

	for (int i = 0; i < 1000; ++i) {
		out << format( "{:19}", uid( dre ) );
		if (((i+3) % 4) == 0)
			out << endl;
	}
	out << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 647
2022-03-16 17:52:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	if (!in) {
		cout << "파일 열기 실패" << endl;
		return 0;
	}



	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 657
2022-03-16 17:54:38 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (!in.eof( )) {
		in >> num;
		cout << num << "\t";
	}
	

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 637
2022-03-16 17:55:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	while (	in >> num )
		cout << num << "\t";


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 665
2022-03-16 17:56:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		cout << num << "\t";
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 776
2022-03-16 18:07:26 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 869
2022-03-16 18:08:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 869
2022-03-16 18:10:44 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in >> num;
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 794
2022-03-16 18:16:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] "int 천개.txt"에 있는 int 1000개를 읽어
// 가장 큰 값을 찾아 화면에 출력하라.
// 코드를 답안지에 쓰고 출력되는 값도 답지에 적어라.

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt" };

	// 여기 들어갈 코드를 답지에 적어라.
	cout << "최대값 -" << *max_element( istream_iterator<int>{in}, {} ) << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 887
2022-03-16 18:33:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] int 1000개를 저장하는데 필요한 메모리는 몇 바이트입니까?
//  - 만든 사람 마음대로
// 그렇지만 자료를 입출력하는데 가장 빠른 방법은 저수준 I/O를 사용하는 것이다.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt" };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 848
2022-03-16 18:51:45 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 출력파일의 write 함수로 메모리 전체를 기록하였다.
// 파일 크기가 맞나 확인하고 그렇지 않다면 이유를 설명하라.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt", ios::binary };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 848
2022-03-16 18:52:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <random>
#include "save.h"
using namespace std;

// [문제] 출력파일의 write 함수로 메모리 전체를 기록하였다.
// 파일 크기가 맞나 확인하고 그렇지 않다면 이유를 설명하라.

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main( )
//---------
{
	ofstream out{ "int 천개.txt", ios::binary };

	int num;

	for (int i{}; i < 1'000; ++i) {
		num = uid( dre );
		out.write( (const char*) & num, sizeof( int ) );
	}

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 922
2022-03-16 19:04:54 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num;
	int max{ numeric_limits<int>::min( ) };

	for (int i{}; i < 1'000; ++i) {
		in.read( (char*)&num, sizeof( int ) );
		if (max < num)
			max = num;
	}
	cout << "최댓값 - " << max << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 863
2022-03-16 19:13:23 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num[1000];
	in.read( (char*)num, sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 863
2022-03-16 19:13:31 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.
	int num[1000];
	in.read( (char*)num, sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 934
2022-03-16 19:18:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.16 수910          수910목56                  (2주 2일)
//                      (5:30~7:10)
// 
// 파일에 있는 자료 읽어 오기
//-----------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"
using namespace std;

// [문제] 파일 "int 천개.txt" - int 값 1000개가 바이너리모드로 write() 함수로 기록
// 읽어서 최댓값을 화면에 출력하라
// 코드와 출력값을 답지에 적어라

//---------
int main( )
//---------
{
	ifstream in{ "int 천개.txt", ios::binary };

	// 여기에 들어갈 코드를 답지에 적어라.

	array<int, 1'000> num;		// int num[1'000]; 사용하지 말자

	in.read( (char*)num.data(), sizeof( int ) * 1'000 );
	cout << *max_element( begin( num ), end( num ) ) << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 727
저장시간: 2022-03-17 13:32:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 오늘 - ?
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 740
저장시간: 2022-03-17 13:32:53 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 오늘 - ?
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	cout << num;
	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 899
저장시간: 2022-03-17 13:41:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	new int [num];

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1102
저장시간: 2022-03-17 13:47:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += num;

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1102
저장시간: 2022-03-17 13:48:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += num;

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:51 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:48:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1103
저장시간: 2022-03-17 13:49:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 
// 메모리값을 1부터 채운다
// 합계를 출력하라.
//
// 예) 5
// int[5] - { 1, 2, 3, 4, 5 }
// 합계 - 25

//---------
int main( )
//---------
{
	int num;
	cout << "int 몇 개를 저장할까요? ";
	cin >> num;

	// 여기에 들어갈 코드를 답지에 적어라
	int* p = new int [num];
	for (int i{}; i < num; ++i)
		p[i] = i + 1;

	// 합계를 구해 출력
	int sum{};
	for (int i{}; i < num; ++i)
		sum += p[i];

	cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1116
저장시간: 2022-03-17 14:02:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1117
저장시간: 2022-03-17 14:03:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1151
저장시간: 2022-03-17 14:04:00 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1161
저장시간: 2022-03-17 14:04:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1161
저장시간: 2022-03-17 14:06:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p = new int[num];
		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1249
저장시간: 2022-03-17 14:12:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
//
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		try {
			p = new int[num];
		}
		catch (exception& e) {
			cout << e.what( ) << endl;
		}

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1246
저장시간: 2022-03-17 14:15:56 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		long long sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1240
저장시간: 2022-03-17 14:16:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1240
저장시간: 2022-03-17 14:16:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 사용자가 입력한 숫자만큼 int를 저장할 수 있는 메모리를 만들고
// 메모리값을 1부터 채운다
// 합계를 출력하라.
// 이 과정을 반복하라 - 문제점을 해결하라

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	cout << sizeof( long long ) << endl;
	while ( true ) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p {};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
	}
}



파일이름: 소스.cpp
파일크기: 1090
저장시간: 2022-03-17 14:40:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while (true) {
		int num;
		cout << "int 몇 개를 저장할까요? ";
		cin >> num;

		// 여기에 들어갈 코드를 답지에 적어라
		int* p{};
		p = new int[num];

		for (int i{}; i < num; ++i)
			p[i] = i + 1;

		// 합계를 구해 출력
		int sum{};
		for (int i{}; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
		cout << endl;

		// 여기서 메모리 반환
		delete[] p;
	}
}



파일이름: 소스.cpp
파일크기: 1131
저장시간: 2022-03-17 14:41:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		while (true) {
			int num;
			cout << "int 몇 개를 저장할까요? ";
			cin >> num;

			// 여기에 들어갈 코드를 답지에 적어라
			int* p{};
			p = new int[num];

			for (int i{}; i < num; ++i)
				p[i] = i + 1;

			// 합계를 구해 출력
			int sum{};
			for (int i{}; i < num; ++i)
				sum += p[i];

			cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
			cout << endl;

			// 여기서 메모리 반환
			delete[] p;
		}
	}
}



파일이름: 소스.cpp
파일크기: 1142
저장시간: 2022-03-17 14:42:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//---------
int main( )
//---------
{
	save( "소스.cpp" );

	while ( true ) {
		while (true) {
			int num = 20'0000'0000;
			cout << "int 몇 개를 저장할까요? 20'0000'0000";

			// 여기에 들어갈 코드를 답지에 적어라
			int* p{};
			p = new int[num];

			for (int i{}; i < num; ++i)
				p[i] = i + 1;

			// 합계를 구해 출력
			int sum{};
			for (int i{}; i < num; ++i)
				sum += p[i];

			cout << "1부터 " << num << " 까지 합계는 - " << sum << endl;
			cout << endl;

			// 여기서 메모리 반환
			delete[] p;
		}
	}
}



파일이름: 소스.cpp
파일크기: 901
저장시간: 2022-03-17 14:46:20 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	new Dog[3];


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 934
저장시간: 2022-03-17 14:47:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	// 사용

	save( "소스.cpp" );

	delete p;
}



파일이름: 소스.cpp
파일크기: 936
저장시간: 2022-03-17 14:49:47 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};


//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	// 사용

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1043
저장시간: 2022-03-17 14:56:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
	}

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1058
저장시간: 2022-03-17 14:57:06 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	Dog* p = new Dog[3];

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
		delete[] p;
	}

	save( "소스.cpp" );

	delete[] p;
}



파일이름: 소스.cpp
파일크기: 1077
저장시간: 2022-03-17 15:01:46 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.17 목56          수910목56                 (3주 1일)
// 
// 앞으로 사용하지 않도록 노력해보자
// 지난시간 - int[10] 쓰지 말자 --> array<int,10>
// 지금시간 - int* 쓰지 말자
// 
// 
// 오늘 - C++ 컴파일러가 값을 아는 시점
//		1. 실행하기 전 - compile time - constexpr
//		2. 실행한 후 - run time 시에 결정되는 값 - dynamic allocation
//-----------------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"
using namespace std;

// [실습] 스마트포인터가 어떤지 관찰한다
// 객체의 생성과 소멸관찰이 필수이므로 초미니 클래스를 만들어 동작 관찰

struct Dog {
	Dog( ) { cout << "Dog 생성" << endl; }
	~Dog( ) { cout << "Dog 소멸" << endl; }
};

void f( )
{
	throw 1;
}

//---------
int main( )
//---------
{
	// RAII로 자동화
	unique_ptr<Dog[]> p{new Dog[3]};

	try {
		f( );		// 예외를 던지는 함수 호출
	}
	catch (...) {	// ... -> ellipses	
	}

	save( "소스.cpp" );
}

