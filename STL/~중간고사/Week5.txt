

파일이름: 소스.cpp
파일크기: 1335
저장시간: 2022-03-30 17:33:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4
	char* p;		// 8	
	int id;			// 4
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1335
저장시간: 2022-03-30 17:34:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4
	int id;			// 4
	char* p;		// 8	
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1341
저장시간: 2022-03-30 17:35:27 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

class STRING {
	int num;		// 4(8)
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num( strlen( s ) ), p{new char[num]}  {
		id = ++gid;
		memcpy( p, s, num );
		// 관찰메시지 on
		cout << "ctor [" << id << "] 주소:" << this << endl;
	}

	~STRING( ) {
		// 관찰메시지 on
		cout << "dtor [" << id << "] 주소:" << this << endl;
		delete[] p;
	}

//	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };
//ostream& operator<<( ostream&, const STRING& );


//---------
int main( )
//---------
{
	cout << sizeof( STRING ) << endl;

//	STRING a{ "2022 3 24" };
//	STRING b{ "STL STRING 작성 시작" };

//	cout << a << endl;
//	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1540
저장시간: 2022-03-30 17:52:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;		// 8
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };

	cout << a << endl;
	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1557
저장시간: 2022-03-30 17:52:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;		// 8
	char* p;		// 8	
	int id;			// 4(8)
	static int gid;

public:
	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022 3 24" };
	STRING b{ "STL STRING 작성 시작" };

	cout << a << endl;
	cout << b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1948
저장시간: 2022-03-30 18:22:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };

	cout << a + b << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1964
저장시간: 2022-03-30 18:24:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 1960
저장시간: 2022-03-30 18:25:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}


	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2357
저장시간: 2022-03-30 18:30:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2358
저장시간: 2022-03-30 18:31:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a ;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:31:36 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:33:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2361
저장시간: 2022-03-30 18:34:35 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 2425
저장시간: 2022-03-30 18:37:57 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// 자원을 확보하는 관찰용 클래스 STRING - 컨테이너/반복자/알고리즘
// 
// 컴파일러 최적화 - RVO(리턴시 복사생성x), copy ellision
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 앞으로 사용할 class STRING 작성 시작(RAII)
// [문제] main()이 문제없이 실행되게 하자
// 관찰할 수 있도록 special 함수에 출력메시지를 추가한다.
// 객체가 생성될때마다 고유번호를 준다

bool 관찰{ false };

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( ) : num{}, p{}, id{ ++gid } {
		if (관찰)
			print( "디폴트" );
	}


	STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } {
		p = new char[num];
		memcpy( p, s, num );

		if (관찰)
			print( "생성자(*)" );
	}

	~STRING( ) {
		if (관찰)
			print( "소멸자" );
		if (num)
			delete[] p;
	}

	STRING( const STRING& other ) : id{ ++gid }, num{ other.num } {
		p = new char[num];
		memcpy( p, other.p, num );
		if (관찰)
			print( "복사생성" );
 	}

	STRING& operator=( const STRING& other ) {
		if (this == &other)
			return *this;

		if (num)
			delete[] p;

		num = other.num;
		p = new char[num];
		memcpy( p, other.p, num );

		if (관찰)
			print( "복사할당" );
	}

	STRING operator+( const STRING& rhs ) const {
		STRING temp;	// 임시객체를 만들어 더한후 리턴	
		temp.num = num + rhs.num;
		temp.p = new char[temp.num];

		memcpy( temp.p, p, num );
		memcpy( temp.p + num, rhs.p, rhs.num );
		return temp;
	}


	void print( const char* s ) const {
		cout << s << " [" << id << "] 객체:" << this;
		if (num)
			cout << " - 자원:" << num << " 주소:" << (void*)p;
		else
			cout << " - 자원없음";
		cout << endl;
	}

	friend ostream& operator<<( ostream&, const STRING& );
};

int STRING::gid{ };

ostream& operator<<( ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};


//---------
int main( )
//---------
{
	관찰 = true;

	STRING a{ "2022년 " };
	STRING b{ "3월 30일" };
	STRING c = a + b;

	cout << c << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 482
저장시간: 2022-03-30 18:51:18 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 528
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
	save( "STRING.h" );
	save( "STRING.cpp" );
}



파일이름: STRING.h
파일크기: 868
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------
#pragma once

#include <iostream>

class STRING {
	size_t num;							// 관리하는 자원 수
	char* p;							// 자원의 주소	
	int id;								// 생성 시 부여한 고유값
	static int gid;						// 아이디 생성용

public:
	STRING( );
	STRING( const char* s );
	~STRING( );
	
	STRING( const STRING& other );
	STRING& operator=( const STRING& other );

	STRING operator+( const STRING& rhs ) const;
	
	void print( const char* s ) const;

	friend std::ostream& operator<<( std::ostream&, const STRING& );
};



파일이름: STRING.cpp
파일크기: 1866
저장시간: 2022-03-30 18:51:48 GMT+9

//-----------------------------------------------------------------------------
// STRING - STL 내부 동작을 관찰하려고 만든 자원을 관리하는 클래스
//        - std::string 동작 대부분을 직접 구현하며 STL 동작방식을 이해
//
// 2022. 3. 30							Prorammed by wulong
//-----------------------------------------------------------------------------

#include <iostream>
#include "STRING.h"

bool 관찰{ false };						// 관찰메시지를 보려면 true
int STRING::gid{ };						// class static


STRING::STRING( ) : num{}, p{}, id{ ++gid } 
{
	if (관찰)
		print( "디폴트" );
}

STRING::STRING( const char* s ) : num{ strlen( s ) }, id{ ++gid } 
{
	p = new char[num];
	memcpy( p, s, num );

	if (관찰)
		print( "생성자(*)" );
}

STRING::~STRING( ) 
{
	if (관찰)
		print( "소멸자" );

	if (num)
		delete[] p;
}

STRING::STRING( const STRING& other ) : id{ ++gid }, num{ other.num } 
{
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사생성" );
}

STRING& STRING::operator=( const STRING& other ) 
{
	if (this == &other)
		return *this;

	if (num)
		delete[] p;

	num = other.num;
	p = new char[num];
	memcpy( p, other.p, num );

	if (관찰)
		print( "복사할당" );
}

STRING STRING::operator+( const STRING& rhs ) const 
{
	STRING temp;					// 임시객체를 만들어 더한후 리턴	
	temp.num = num + rhs.num;
	temp.p = new char[temp.num];

	memcpy( temp.p, p, num );
	memcpy( temp.p + num, rhs.p, rhs.num );
	return temp;
}

void STRING::print( const char* s ) const 
{
	std::cout << s << " [" << id << "] 객체:" << this;
	if (num)
		std::cout << " - 자원:" << num << " 주소:" << (void*)p;
	else
		std::cout << " - 자원없음";
	std::cout << std::endl;
}

std::ostream& operator<<( std::ostream& os, const STRING& s )
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
};

파일이름: 소스.cpp
파일크기: 520
저장시간: 2022-03-30 18:54:59 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// STRING 클래스 파일 분리
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	cout << STRING{ "123" } + STRING{ "456" } << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 605
저장시간: 2022-03-30 19:04:02 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (int i{}; i < a.size( ); ++i)
		cout << a[i] << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 587
저장시간: 2022-03-30 19:04:32 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto x : a)
		cout << x << endl;


	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 602
저장시간: 2022-03-30 19:05:25 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 603
저장시간: 2022-03-30 19:06:19 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (auto& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 611
저장시간: 2022-03-30 19:07:05 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 778
저장시간: 2022-03-30 19:10:24 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	// 관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	// 길이 오름차순으로 a를 정렬하라
	sort( a.begin( ), a.end( ), []( STRING a, STRING b ) {
		return a.getNum( ) < b.getNum( );
		} );


	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 775
저장시간: 2022-03-30 19:11:15 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.30 수910          수910목56                 (4주 2일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

extern bool 관찰;

//---------
int main( )
//---------
{
	관찰 = true;

	array<STRING, 3> a{ "2022년", "3월", "30일" };

	// 길이 오름차순으로 a를 정렬하라
	sort( a.begin( ), a.end( ), []( STRING a, STRING b ) {
		return a.getNum( ) < b.getNum( );
		} );


	for (const STRING& x : a)
		cout << x << endl;

	save( "소스.cpp" );
}



파일이름: 소스.cpp
파일크기: 528
저장시간: 2022-03-31 13:33:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	array<int, 10> a;

	cout << "array<>의 크기 - " << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 543
저장시간: 2022-03-31 13:33:28 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	array<int, 10> a;

	cout << "array<>의 크기 - " << sizeof( a ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 574
저장시간: 2022-03-31 13:35:50 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class T, int N>
class Array {
	T data[N];
public:
	Array( ) {
	}
};

//---------
int main( )
//---------
{
	Array<int, 10> a;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 620
저장시간: 2022-03-31 13:36:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;

template <class T, int N>
class Array {
	T data[N];
public:
	Array( ) {
	}
};

//---------
int main( )
//---------
{
	Array<int, 10> a;

	cout << "크기 - " << sizeof( a ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 570
저장시간: 2022-03-31 14:15:40 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	cout << *a.begin( ) << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 611
저장시간: 2022-03-31 14:16:52 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	array<int,10>::iterator p = a.begin( );
	++p;
	p != a.end( );
	*p;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 647
저장시간: 2022-03-31 14:19:30 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (array<int, 10>::iterator i = a.begin( ); i != a.end( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 627
저장시간: 2022-03-31 14:20:16 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.begin( ); i != a.end( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 629
저장시간: 2022-03-31 14:22:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << ' ';
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 628
저장시간: 2022-03-31 14:23:03 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	auto i = a.cbegin( );
	while (i != a.cend( ))
		cout << *i++ << " ";
	cout << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 631
저장시간: 2022-03-31 14:39:12 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.crbegin( ); i != a.crend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 629
저장시간: 2022-03-31 14:39:42 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 652
저장시간: 2022-03-31 14:41:29 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	a.fill( 33333 );


	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 653
저장시간: 2022-03-31 14:42:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	// 자료구조
	array<int, 10> a { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	a.fill( 0xcccc );


	for (auto i = a.cbegin( ); i != a.cend( ); ++i)
		cout << *i << " ";
	cout << endl;


	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 534
저장시간: 2022-03-31 14:43:22 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	int a[10];

	cout << a[-1] << endl;
	cout << a[10] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 649
저장시간: 2022-03-31 14:45:49 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		cout << num << "번째 값은 - " << a[num] << endl;
	}

}

파일이름: 소스.cpp
파일크기: 652
저장시간: 2022-03-31 14:48:34 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;
		cout << num << "번째 값은 - " << a.at(num) << endl;
	}

}

파일이름: 소스.cpp
파일크기: 734
저장시간: 2022-03-31 14:50:14 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << e.what( ) << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:33 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:51:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
//-----------------------------------------------------------------------------
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"
using namespace std;


//---------
int main( )
//---------
{
	array<int, 5> a{ 2, 4, 6, 8, 10 };

	save( "소스.cpp" );

	while (true) {
		cout << "몇 번째인지 알려주세요: ";
		int num;
		cin >> num;

		try {
			cout << num << "번째 값은 - " << a.at( num ) << endl;
		} 
		catch (exception& e) {
			cout << "유효범위는 0-4" << endl;
		}
	}

}

파일이름: 소스.cpp
파일크기: 741
저장시간: 2022-03-31 14:58:09 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (int i = 0; i < v.size( ); ++i)
		cout << v[i] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 743
저장시간: 2022-03-31 14:59:17 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (int i = v.size(); 0 < i; --i )
		cout << v[i-1] << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 752
저장시간: 2022-03-31 14:59:58 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"
using namespace std;

//---------
int main( )
//---------
{
	vector<char> v;

	v.push_back( 'S' );
	v.push_back( 'T' );
	v.push_back( 'L' );

	for (auto i = v.crbegin( ); i < v.crend( ); ++i)
		cout << *i << endl;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 866
저장시간: 2022-03-31 15:06:55 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] "소스.cpp"를 공백까지 전부 vector에 저장하라.
// 화면에 vector의 char를 모두 출력하라 

//---------
int main( )
//---------
{
	vector<char> v;

	ifstream in{ "소스.cpp" };
	in >> noskipws;

	char c;
	while ( in >> c )
		v.push_back( c );

	for (char c : v)
		cout << c;

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 782
저장시간: 2022-03-31 15:17:13 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 단어(string)를 키보드(cin)에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라.

//---------
int main( )
//---------
{
	vector<string> v;

	string s;
	while ( cin >> s )
		v.push_back( s );

	save( "소스.cpp" );
}

파일이름: 소스.cpp
파일크기: 883
저장시간: 2022-03-31 15:19:41 GMT+9

//-----------------------------------------------------------------------------
// 2022년 1학기 STL		3.31 목56          수910목56                 (5주 1일)
// 
// Containers are objects that store other objects.
// 1. Sequence container
//		array			- 유일하게 크기가 고정, [] 대체
//		vector
//		deque
//		forward_list
//		list
//-----------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"
using namespace std;

// [문제] 단어(string)를 키보드(cin)에서 입력받아
// 오름차순 정렬한 후
// 화면에 출력하라.

//---------
int main( )
//---------
{
	vector<string> v;

	string s;
	while ( cin >> s )
		v.push_back( s );

	sort( v.begin( ), v.end( ) );

	for (string s : v)
		cout << s << endl;

	save( "소스.cpp" );
}